# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rails_admin_import` gem.
# Please instead update this file by running `bin/tapioca gem rails_admin_import`.


# source://rails_admin_import//lib/rails_admin_import/action.rb#3
module RailsAdmin
  class << self
    # source://rails_admin/3.1.4/lib/rails_admin/extension.rb#15
    def add_extension(extension_key, extension_definition, options = T.unsafe(nil)); end

    # source://rails_admin/3.1.4/lib/rails_admin.rb#31
    def config(entity = T.unsafe(nil), &block); end

    # source://railties/7.1.3.4/lib/rails/engine.rb#412
    def railtie_helpers_paths; end

    # source://railties/7.1.3.4/lib/rails/engine.rb#395
    def railtie_namespace; end

    # source://railties/7.1.3.4/lib/rails/engine.rb#416
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # source://rails_admin/3.1.4/lib/rails_admin/extension.rb#28
    def setup_all_extensions; end

    # source://railties/7.1.3.4/lib/rails/engine.rb#401
    def table_name_prefix; end

    # source://railties/7.1.3.4/lib/rails/engine.rb#408
    def use_relative_model_naming?; end

    # source://rails_admin/3.1.4/lib/rails_admin.rb#59
    def yaml_dump(object); end

    # source://rails_admin/3.1.4/lib/rails_admin.rb#51
    def yaml_load(yaml); end
  end
end

# source://rails_admin_import//lib/rails_admin_import/action.rb#4
module RailsAdmin::Config
  class << self
    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#291
    def actions(&block); end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#245
    def asset_source; end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#85
    def asset_source=(_arg0); end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#116
    def audit_with(*args, &block); end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#110
    def authenticate_with(&blk); end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#153
    def authorize_with(*args, &block); end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#59
    def browser_validations; end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#59
    def browser_validations=(_arg0); end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#56
    def compact_show_view; end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#56
    def compact_show_view=(_arg0); end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#179
    def configure_with(extension); end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#197
    def current_user_method(&block); end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#47
    def default_associated_collection_limit; end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#47
    def default_associated_collection_limit=(_arg0); end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#40
    def default_hidden_fields; end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#259
    def default_hidden_fields=(fields); end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#44
    def default_items_per_page; end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#44
    def default_items_per_page=(_arg0); end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#49
    def default_search_operator; end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#202
    def default_search_operator=(operator); end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#30
    def excluded_models; end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#30
    def excluded_models=(_arg0); end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#66
    def forgery_protection_settings; end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#66
    def forgery_protection_settings=(_arg0); end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#37
    def included_models; end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#37
    def included_models=(_arg0); end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#53
    def label_methods; end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#53
    def label_methods=(_arg0); end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#27
    def main_app_name; end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#27
    def main_app_name=(_arg0); end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#227
    def model(entity, &block); end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#301
    def models; end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#211
    def models_pool; end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#75
    def navbar_css_classes; end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#75
    def navbar_css_classes=(_arg0); end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#82
    def navigation_static_label; end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#82
    def navigation_static_label=(_arg0); end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#81
    def navigation_static_links; end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#81
    def navigation_static_links=(_arg0); end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#62
    def parent_controller; end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#269
    def parent_controller=(name); end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#72
    def registry; end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#347
    def reload!; end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#308
    def reset; end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#341
    def reset_model(model); end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#78
    def show_gravatar; end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#78
    def show_gravatar=(_arg0); end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#286
    def sidescroll=(_); end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#282
    def total_columns_width=(_); end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#355
    def visible_models(bindings); end

    private

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#367
    def viable_models; end

    # source://rails_admin/3.1.4/lib/rails_admin/config.rb#386
    def visible_models_with_bindings(bindings); end
  end
end

# source://rails_admin_import//lib/rails_admin_import/action.rb#5
module RailsAdmin::Config::Actions
  class << self
    # source://rails_admin/3.1.4/lib/rails_admin/config/actions.rb#50
    def add_action(key, parent_class, parent, &block); end

    # source://rails_admin/3.1.4/lib/rails_admin/config/actions.rb#7
    def all(scope = T.unsafe(nil), bindings = T.unsafe(nil)); end

    # source://rails_admin/3.1.4/lib/rails_admin/config/actions.rb#72
    def bulk_delete(&block); end

    # source://rails_admin/3.1.4/lib/rails_admin/config/actions.rb#38
    def collection(key, parent_class = T.unsafe(nil), &block); end

    # source://rails_admin/3.1.4/lib/rails_admin/config/actions.rb#72
    def dashboard(&block); end

    # source://rails_admin/3.1.4/lib/rails_admin/config/actions.rb#72
    def delete(&block); end

    # source://rails_admin/3.1.4/lib/rails_admin/config/actions.rb#72
    def edit(&block); end

    # source://rails_admin/3.1.4/lib/rails_admin/config/actions.rb#72
    def export(&block); end

    # source://rails_admin/3.1.4/lib/rails_admin/config/actions.rb#32
    def find(custom_key, bindings = T.unsafe(nil)); end

    # source://rails_admin/3.1.4/lib/rails_admin/config/actions.rb#72
    def history_index(&block); end

    # source://rails_admin/3.1.4/lib/rails_admin/config/actions.rb#72
    def history_show(&block); end

    # source://rails_admin/3.1.4/lib/rails_admin/config/actions.rb#72
    def import(&block); end

    # source://rails_admin/3.1.4/lib/rails_admin/config/actions.rb#72
    def index(&block); end

    # source://rails_admin/3.1.4/lib/rails_admin/config/actions.rb#42
    def member(key, parent_class = T.unsafe(nil), &block); end

    # source://rails_admin/3.1.4/lib/rails_admin/config/actions.rb#72
    def new(&block); end

    # source://rails_admin/3.1.4/lib/rails_admin/config/actions.rb#65
    def register(name, klass = T.unsafe(nil)); end

    # source://rails_admin/3.1.4/lib/rails_admin/config/actions.rb#61
    def reset; end

    # source://rails_admin/3.1.4/lib/rails_admin/config/actions.rb#46
    def root(key, parent_class = T.unsafe(nil), &block); end

    # source://rails_admin/3.1.4/lib/rails_admin/config/actions.rb#72
    def show(&block); end

    # source://rails_admin/3.1.4/lib/rails_admin/config/actions.rb#72
    def show_in_app(&block); end

    private

    # source://rails_admin/3.1.4/lib/rails_admin/config/actions.rb#97
    def add_action_custom_key(action, &block); end

    # source://rails_admin/3.1.4/lib/rails_admin/config/actions.rb#81
    def init_actions!; end
  end
end

# source://rails_admin_import//lib/rails_admin_import/action.rb#6
class RailsAdmin::Config::Actions::Import < ::RailsAdmin::Config::Actions::Base
  # source://rails_admin/3.1.4/lib/rails_admin/config/configurable.rb#66
  def collection(*args, &block); end

  # source://rails_admin/3.1.4/lib/rails_admin/config/configurable.rb#66
  def controller(*args, &block); end

  # source://rails_admin/3.1.4/lib/rails_admin/config/configurable.rb#66
  def http_methods(*args, &block); end

  # source://rails_admin/3.1.4/lib/rails_admin/config/configurable.rb#66
  def link_icon(*args, &block); end
end

class RailsAdmin::Config::Model
  # source://rails_admin/3.1.4/lib/rails_admin/config/model.rb#31
  def initialize(entity); end

  # source://rails_admin/3.1.4/lib/rails_admin/config/model.rb#26
  def abstract_model; end

  # source://rails_admin/3.1.4/lib/rails_admin/config/sections.rb#29
  def base(&block); end

  # source://rails_admin/3.1.4/lib/rails_admin/config/sections.rb#29
  def create(&block); end

  # source://rails_admin/3.1.4/lib/rails_admin/config/sections.rb#29
  def edit(&block); end

  # source://rails_admin/3.1.4/lib/rails_admin/config/model.rb#50
  def excluded?; end

  # source://rails_admin/3.1.4/lib/rails_admin/config/sections.rb#29
  def export(&block); end

  # source://rails_admin/3.1.4/lib/rails_admin/config/model.rb#27
  def groups; end

  # source://rails_admin/3.1.4/lib/rails_admin/config/model.rb#27
  def groups=(_arg0); end

  # source://rails_admin_import//lib/rails_admin_import/config/sections/import.rb#29
  def import(&block); end

  # source://rails_admin/3.1.4/lib/rails_admin/config/configurable.rb#66
  def label(*args, &block); end

  # source://rails_admin/3.1.4/lib/rails_admin/config/configurable.rb#66
  def label_plural(*args, &block); end

  # source://rails_admin/3.1.4/lib/rails_admin/config/configurable.rb#66
  def last_created_at(*args, &block); end

  # source://rails_admin/3.1.4/lib/rails_admin/config/sections.rb#29
  def list(&block); end

  # source://rails_admin/3.1.4/lib/rails_admin/config/model.rb#115
  def method_missing(method_name, *args, &block); end

  # source://rails_admin/3.1.4/lib/rails_admin/config/sections.rb#29
  def modal(&block); end

  # source://rails_admin/3.1.4/lib/rails_admin/config/configurable.rb#66
  def navigation_icon(*args, &block); end

  # source://rails_admin/3.1.4/lib/rails_admin/config/configurable.rb#66
  def navigation_label(*args, &block); end

  # source://rails_admin/3.1.4/lib/rails_admin/config/sections.rb#29
  def nested(&block); end

  # source://rails_admin/3.1.4/lib/rails_admin/config/model.rb#56
  def object_label; end

  # source://rails_admin/3.1.4/lib/rails_admin/config/configurable.rb#66
  def object_label_method(*args, &block); end

  # source://rails_admin/3.1.4/lib/rails_admin/config/configurable.rb#66
  def parent(*args, &block); end

  # source://rails_admin/3.1.4/lib/rails_admin/config/model.rb#77
  def pluralize(count); end

  # source://rails_admin/3.1.4/lib/rails_admin/config/model.rb#26
  def root; end

  # source://rails_admin/3.1.4/lib/rails_admin/config/configurable.rb#66
  def scope(*args, &block); end

  # source://rails_admin/3.1.4/lib/rails_admin/config/sections.rb#29
  def show(&block); end

  # source://rails_admin/3.1.4/lib/rails_admin/config/sections.rb#29
  def update(&block); end

  # source://rails_admin/3.1.4/lib/rails_admin/config/configurable.rb#66
  def visible(*args, &block); end

  # source://rails_admin/3.1.4/lib/rails_admin/config/configurable.rb#60
  def visible?; end

  # source://rails_admin/3.1.4/lib/rails_admin/config/configurable.rb#66
  def weight(*args, &block); end
end

# source://rails_admin_import//lib/rails_admin_import/config/sections/import.rb#5
module RailsAdmin::Config::Sections
  class << self
    # source://rails_admin/3.1.4/lib/rails_admin/config/sections.rb#24
    def included(klass); end
  end
end

# Configuration of the navigation view
#
# source://rails_admin_import//lib/rails_admin_import/config/sections/import.rb#7
class RailsAdmin::Config::Sections::Import < ::RailsAdmin::Config::Sections::Base
  # source://rails_admin/3.1.4/lib/rails_admin/config/configurable.rb#66
  def default_excluded_fields(*args, &block); end

  # source://rails_admin/3.1.4/lib/rails_admin/config/configurable.rb#66
  def mapping_key(*args, &block); end

  # source://rails_admin/3.1.4/lib/rails_admin/config/configurable.rb#66
  def mapping_key_list(*args, &block); end
end

# Register the configuration adapter for Rails Admin
# to allow configure_with(:import)
#
# source://rails_admin_import//lib/rails_admin_import/engine.rb#1
module RailsAdminImport
  class << self
    # source://rails_admin_import//lib/rails_admin_import.rb#9
    def config(entity = T.unsafe(nil), &block); end

    # source://rails_admin_import//lib/rails_admin_import.rb#19
    def reset; end
  end
end

# source://rails_admin_import//lib/rails_admin_import/import_model.rb#2
class RailsAdminImport::AssociationNotFound < ::StandardError; end

# source://rails_admin_import//lib/rails_admin_import/config/legacy_model.rb#2
module RailsAdminImport::Config
  class << self
    # Returns the value of attribute csv_options.
    #
    # source://rails_admin_import//lib/rails_admin_import/config.rb#11
    def csv_options; end

    # Sets the attribute csv_options
    #
    # @param value the value to set the attribute csv_options to.
    #
    # source://rails_admin_import//lib/rails_admin_import/config.rb#11
    def csv_options=(_arg0); end

    # Returns the value of attribute header_converter.
    #
    # source://rails_admin_import//lib/rails_admin_import/config.rb#10
    def header_converter; end

    # Sets the attribute header_converter
    #
    # @param value the value to set the attribute header_converter to.
    #
    # source://rails_admin_import//lib/rails_admin_import/config.rb#10
    def header_converter=(_arg0); end

    # Returns the value of attribute line_item_limit.
    #
    # source://rails_admin_import//lib/rails_admin_import/config.rb#7
    def line_item_limit; end

    # Sets the attribute line_item_limit
    #
    # @param value the value to set the attribute line_item_limit to.
    #
    # source://rails_admin_import//lib/rails_admin_import/config.rb#7
    def line_item_limit=(_arg0); end

    # Returns the value of attribute logging.
    #
    # source://rails_admin_import//lib/rails_admin_import/config.rb#6
    def logging; end

    # Sets the attribute logging
    #
    # @param value the value to set the attribute logging to.
    #
    # source://rails_admin_import//lib/rails_admin_import/config.rb#6
    def logging=(_arg0); end

    # source://rails_admin_import//lib/rails_admin_import/config.rb#21
    def model(model_name, &block); end

    # Returns the value of attribute pass_filename.
    #
    # source://rails_admin_import//lib/rails_admin_import/config.rb#12
    def pass_filename; end

    # Sets the attribute pass_filename
    #
    # @param value the value to set the attribute pass_filename to.
    #
    # source://rails_admin_import//lib/rails_admin_import/config.rb#12
    def pass_filename=(_arg0); end

    # Reset all configurations to defaults.
    #
    # source://rails_admin_import//lib/rails_admin_import/config.rb#34
    def reset; end

    # Returns the value of attribute rollback_on_error.
    #
    # source://rails_admin_import//lib/rails_admin_import/config.rb#8
    def rollback_on_error; end

    # Sets the attribute rollback_on_error
    #
    # @param value the value to set the attribute rollback_on_error to.
    #
    # source://rails_admin_import//lib/rails_admin_import/config.rb#8
    def rollback_on_error=(_arg0); end

    # Returns the value of attribute update_if_exists.
    #
    # source://rails_admin_import//lib/rails_admin_import/config.rb#9
    def update_if_exists; end

    # Sets the attribute update_if_exists
    #
    # @param value the value to set the attribute update_if_exists to.
    #
    # source://rails_admin_import//lib/rails_admin_import/config.rb#9
    def update_if_exists=(_arg0); end
  end
end

# source://rails_admin_import//lib/rails_admin_import/config/legacy_model.rb#3
class RailsAdminImport::Config::LegacyModel
  # @return [LegacyModel] a new instance of LegacyModel
  #
  # source://rails_admin_import//lib/rails_admin_import/config/legacy_model.rb#5
  def initialize(model_name); end

  # source://rails_admin_import//lib/rails_admin_import/config/legacy_model.rb#19
  def excluded_fields(values); end

  # source://rails_admin_import//lib/rails_admin_import/config/legacy_model.rb#29
  def extra_fields(values); end

  # source://rails_admin_import//lib/rails_admin_import/config/legacy_model.rb#9
  def label(_value); end

  # source://rails_admin_import//lib/rails_admin_import/config/legacy_model.rb#14
  def mapping_key(value); end

  # Returns the value of attribute model_name.
  #
  # source://rails_admin_import//lib/rails_admin_import/config/legacy_model.rb#4
  def model_name; end
end

# source://rails_admin_import//lib/rails_admin_import/engine.rb#2
class RailsAdminImport::Engine < ::Rails::Engine
  class << self
    # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#70
    def __callbacks; end
  end
end

# source://rails_admin_import//lib/rails_admin_import/rails_admin_plugin.rb#13
module RailsAdminImport::Extension; end

# source://rails_admin_import//lib/rails_admin_import/rails_admin_plugin.rb#14
class RailsAdminImport::Extension::ConfigurationAdapter < ::SimpleDelegator
  # @return [ConfigurationAdapter] a new instance of ConfigurationAdapter
  #
  # source://rails_admin_import//lib/rails_admin_import/rails_admin_plugin.rb#15
  def initialize; end
end

# source://rails_admin_import//lib/rails_admin_import/formats.rb#2
module RailsAdminImport::Formats
  class << self
    # source://rails_admin_import//lib/rails_admin_import/formats.rb#17
    def all; end

    # source://rails_admin_import//lib/rails_admin_import/formats.rb#13
    def for(format, *args); end

    # source://rails_admin_import//lib/rails_admin_import/formats.rb#8
    def from_file(file); end

    # source://rails_admin_import//lib/rails_admin_import/formats.rb#4
    def register(format, klass); end

    # source://rails_admin_import//lib/rails_admin_import/formats.rb#21
    def reset; end
  end
end

# source://rails_admin_import//lib/rails_admin_import/formats/csv_importer.rb#6
class RailsAdminImport::Formats::CSVImporter < ::RailsAdminImport::Formats::FileImporter
  # @return [CSVImporter] a new instance of CSVImporter
  #
  # source://rails_admin_import//lib/rails_admin_import/formats/csv_importer.rb#12
  def initialize(import_model, params); end

  # A method that yields a hash of attributes for each record to import
  #
  # source://rails_admin_import//lib/rails_admin_import/formats/csv_importer.rb#19
  def each_record; end

  private

  # source://rails_admin_import//lib/rails_admin_import/formats/csv_importer.rb#65
  def convert_to_attributes(row); end

  # source://rails_admin_import//lib/rails_admin_import/formats/csv_importer.rb#28
  def csv_options; end

  # source://rails_admin_import//lib/rails_admin_import/formats/csv_importer.rb#56
  def detect_encoding; end

  # source://rails_admin_import//lib/rails_admin_import/formats/csv_importer.rb#39
  def encoding; end
end

# source://rails_admin_import//lib/rails_admin_import/formats/dummy_importer.rb#3
class RailsAdminImport::Formats::DummyImporter
  # @return [DummyImporter] a new instance of DummyImporter
  #
  # source://rails_admin_import//lib/rails_admin_import/formats/dummy_importer.rb#4
  def initialize(*_arg0); end

  # source://rails_admin_import//lib/rails_admin_import/formats/dummy_importer.rb#11
  def error; end

  # @return [Boolean]
  #
  # source://rails_admin_import//lib/rails_admin_import/formats/dummy_importer.rb#7
  def valid?; end
end

# source://rails_admin_import//lib/rails_admin_import/formats/file_importer.rb#3
class RailsAdminImport::Formats::FileImporter
  # @return [FileImporter] a new instance of FileImporter
  #
  # source://rails_admin_import//lib/rails_admin_import/formats/file_importer.rb#4
  def initialize(import_model, params); end

  # source://rails_admin_import//lib/rails_admin_import/formats/file_importer.rb#22
  def each(&block); end

  # Returns the value of attribute error.
  #
  # source://rails_admin_import//lib/rails_admin_import/formats/file_importer.rb#11
  def error; end

  # Returns the value of attribute filename.
  #
  # source://rails_admin_import//lib/rails_admin_import/formats/file_importer.rb#11
  def filename; end

  # Returns the value of attribute import_model.
  #
  # source://rails_admin_import//lib/rails_admin_import/formats/file_importer.rb#11
  def import_model; end

  # @return [Boolean]
  #
  # source://rails_admin_import//lib/rails_admin_import/formats/file_importer.rb#13
  def valid?; end

  private

  # source://rails_admin_import//lib/rails_admin_import/formats/file_importer.rb#38
  def copy_uploaded_file_to_log_dir; end

  # source://rails_admin_import//lib/rails_admin_import/formats/file_importer.rb#34
  def each_record; end
end

# source://rails_admin_import//lib/rails_admin_import/formats/json_importer.rb#3
class RailsAdminImport::Formats::JSONImporter < ::RailsAdminImport::Formats::FileImporter
  # A method that yields a hash of attributes for each record to import
  #
  # source://rails_admin_import//lib/rails_admin_import/formats/json_importer.rb#8
  def each_record; end

  # source://rails_admin_import//lib/rails_admin_import/formats/json_importer.rb#27
  def root_key; end
end

# source://rails_admin_import//lib/rails_admin_import/formats/xlsx_importer.rb#5
class RailsAdminImport::Formats::XLSXImporter < ::RailsAdminImport::Formats::FileImporter
  # @return [XLSXImporter] a new instance of XLSXImporter
  #
  # source://rails_admin_import//lib/rails_admin_import/formats/xlsx_importer.rb#11
  def initialize(import_model, params); end

  # A method that yields a hash of attributes for each record to import
  #
  # source://rails_admin_import//lib/rails_admin_import/formats/xlsx_importer.rb#17
  def each_record; end

  private

  # source://rails_admin_import//lib/rails_admin_import/formats/xlsx_importer.rb#29
  def convert_headers(headers); end

  # source://rails_admin_import//lib/rails_admin_import/formats/xlsx_importer.rb#35
  def convert_to_attributes(row); end
end

# source://rails_admin_import//lib/rails_admin_import/import_logger.rb#2
class RailsAdminImport::ImportLogger
  # @return [ImportLogger] a new instance of ImportLogger
  #
  # source://rails_admin_import//lib/rails_admin_import/import_logger.rb#5
  def initialize(log_file_name = T.unsafe(nil)); end

  # source://rails_admin_import//lib/rails_admin_import/import_logger.rb#11
  def info(message); end

  # Returns the value of attribute logger.
  #
  # source://rails_admin_import//lib/rails_admin_import/import_logger.rb#3
  def logger; end
end

# source://rails_admin_import//lib/rails_admin_import/import_model.rb#5
class RailsAdminImport::ImportModel
  # @return [ImportModel] a new instance of ImportModel
  #
  # source://rails_admin_import//lib/rails_admin_import/import_model.rb#6
  def initialize(abstract_model); end

  # Returns the value of attribute abstract_model.
  #
  # source://rails_admin_import//lib/rails_admin_import/import_model.rb#12
  def abstract_model; end

  # source://rails_admin_import//lib/rails_admin_import/import_model.rb#83
  def associated_config(field); end

  # source://rails_admin_import//lib/rails_admin_import/import_model.rb#87
  def associated_model_fields(field); end

  # source://rails_admin_import//lib/rails_admin_import/import_model.rb#73
  def associated_object(field, mapping_field, value); end

  # source://rails_admin_import//lib/rails_admin_import/import_model.rb#79
  def association_class(field); end

  # source://rails_admin_import//lib/rails_admin_import/import_model.rb#41
  def association_fields; end

  # source://rails_admin_import//lib/rails_admin_import/import_model.rb#53
  def belongs_to_fields; end

  # Returns the value of attribute config.
  #
  # source://rails_admin_import//lib/rails_admin_import/import_model.rb#12
  def config; end

  # source://rails_admin_import//lib/rails_admin_import/import_model.rb#14
  def display_name; end

  # @return [Boolean]
  #
  # source://rails_admin_import//lib/rails_admin_import/import_model.rb#98
  def has_multiple_values?(field_name); end

  # source://rails_admin_import//lib/rails_admin_import/import_model.rb#26
  def importable_fields(model_config = T.unsafe(nil)); end

  # source://rails_admin_import//lib/rails_admin_import/import_model.rb#18
  def label_for_model(object); end

  # source://rails_admin_import//lib/rails_admin_import/import_model.rb#22
  def label_method; end

  # source://rails_admin_import//lib/rails_admin_import/import_model.rb#59
  def many_association_fields; end

  # Returns the value of attribute model.
  #
  # source://rails_admin_import//lib/rails_admin_import/import_model.rb#12
  def model; end

  # source://rails_admin_import//lib/rails_admin_import/import_model.rb#34
  def model_fields(model_config = T.unsafe(nil)); end

  # source://rails_admin_import//lib/rails_admin_import/import_model.rb#103
  def pluralize_field(field_name); end

  # source://rails_admin_import//lib/rails_admin_import/import_model.rb#47
  def single_association_fields; end

  # source://rails_admin_import//lib/rails_admin_import/import_model.rb#65
  def update_lookup_field_names; end
end

# source://rails_admin_import//lib/rails_admin_import/importer.rb#4
class RailsAdminImport::Importer
  # @return [Importer] a new instance of Importer
  #
  # source://rails_admin_import//lib/rails_admin_import/importer.rb#5
  def initialize(import_model, params); end

  # source://rails_admin_import//lib/rails_admin_import/importer.rb#15
  def import(records); end

  # Returns the value of attribute import_model.
  #
  # source://rails_admin_import//lib/rails_admin_import/importer.rb#10
  def import_model; end

  # Returns the value of attribute params.
  #
  # source://rails_admin_import//lib/rails_admin_import/importer.rb#10
  def params; end

  private

  # source://rails_admin_import//lib/rails_admin_import/importer.rb#247
  def extract_mapping(value, mapping_key); end

  # source://rails_admin_import//lib/rails_admin_import/importer.rb#192
  def find_or_create_object(record, update); end

  # source://rails_admin_import//lib/rails_admin_import/importer.rb#157
  def format_result_message(type, array); end

  # source://rails_admin_import//lib/rails_admin_import/importer.rb#144
  def format_results; end

  # source://rails_admin_import//lib/rails_admin_import/importer.rb#231
  def import_many_association_data(object, record); end

  # source://rails_admin_import//lib/rails_admin_import/importer.rb#72
  def import_record(record); end

  # source://rails_admin_import//lib/rails_admin_import/importer.rb#220
  def import_single_association_data(object, record); end

  # source://rails_admin_import//lib/rails_admin_import/importer.rb#48
  def init_results; end

  # source://rails_admin_import//lib/rails_admin_import/importer.rb#117
  def logger; end

  # source://rails_admin_import//lib/rails_admin_import/importer.rb#187
  def perform_global_callback(method_name); end

  # source://rails_admin_import//lib/rails_admin_import/importer.rb#164
  def perform_model_callback(object, method_name, record); end

  # source://rails_admin_import//lib/rails_admin_import/importer.rb#129
  def report_error(object, action, error); end

  # source://rails_admin_import//lib/rails_admin_import/importer.rb#138
  def report_general_error(error); end

  # source://rails_admin_import//lib/rails_admin_import/importer.rb#177
  def report_old_import_hook(method_name); end

  # source://rails_admin_import//lib/rails_admin_import/importer.rb#121
  def report_success(object, action); end

  # Returns the value of attribute results.
  #
  # source://rails_admin_import//lib/rails_admin_import/importer.rb#115
  def results; end

  # source://rails_admin_import//lib/rails_admin_import/importer.rb#62
  def rollback_if_error; end

  # source://rails_admin_import//lib/rails_admin_import/importer.rb#109
  def update_lookup; end

  # source://rails_admin_import//lib/rails_admin_import/importer.rb#52
  def with_transaction(&block); end
end

# source://rails_admin_import//lib/rails_admin_import/importer.rb#12
class RailsAdminImport::Importer::UpdateLookupError < ::StandardError; end
