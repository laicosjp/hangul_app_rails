# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rails_admin` gem.
# Please instead update this file by running `bin/tapioca gem rails_admin`.


# source://rails_admin//lib/rails_admin/version.rb#3
module RailsAdmin
  extend ::RailsAdmin::Config::ConstLoadSuppressor

  class << self
    # Extend RailsAdmin
    #
    # The extension may define various adapters (e.g., for authorization) and
    # register those via the options hash.
    #
    # source://rails_admin//lib/rails_admin/extension.rb#15
    def add_extension(extension_key, extension_definition, options = T.unsafe(nil)); end

    # Setup RailsAdmin
    #
    # Given the first argument is a model class, a model class name
    # or an abstract model object proxies to model configuration method.
    #
    # If only a block is passed it is stored to initializer stack to be evaluated
    # on first request in production mode and on each request in development. If
    # initialization has already occurred (in other words RailsAdmin.setup has
    # been called) the block will be added to stack and evaluated at once.
    #
    # Otherwise returns RailsAdmin::Config class.
    #
    # @see RailsAdmin::Config
    #
    # source://rails_admin//lib/rails_admin.rb#31
    def config(entity = T.unsafe(nil), &block); end

    # source://railties/7.1.3.4/lib/rails/engine.rb#412
    def railtie_helpers_paths; end

    # source://railties/7.1.3.4/lib/rails/engine.rb#395
    def railtie_namespace; end

    # source://railties/7.1.3.4/lib/rails/engine.rb#416
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # Setup all extensions for testing
    #
    # source://rails_admin//lib/rails_admin/extension.rb#28
    def setup_all_extensions; end

    # source://railties/7.1.3.4/lib/rails/engine.rb#401
    def table_name_prefix; end

    # source://railties/7.1.3.4/lib/rails/engine.rb#408
    def use_relative_model_naming?; end

    # source://rails_admin//lib/rails_admin.rb#59
    def yaml_dump(object); end

    # source://rails_admin//lib/rails_admin.rb#51
    def yaml_load(yaml); end
  end
end

# source://rails_admin//lib/rails_admin/extension.rb#8
RailsAdmin::AUDITING_ADAPTERS = T.let(T.unsafe(nil), Hash)

# source://rails_admin//lib/rails_admin/extension.rb#7
RailsAdmin::AUTHORIZATION_ADAPTERS = T.let(T.unsafe(nil), Hash)

# source://rails_admin//lib/rails_admin/abstract_model.rb#6
class RailsAdmin::AbstractModel
  # @return [AbstractModel] a new instance of AbstractModel
  #
  # source://rails_admin//lib/rails_admin/abstract_model.rb#48
  def initialize(model_or_model_name); end

  # Returns the value of attribute adapter.
  #
  # source://rails_admin//lib/rails_admin/abstract_model.rb#8
  def adapter; end

  # source://rails_admin//lib/rails_admin/abstract_model.rb#7
  def all; end

  # source://rails_admin//lib/rails_admin/abstract_model.rb#7
  def all=(val); end

  # source://rails_admin//lib/rails_admin/abstract_model.rb#67
  def config; end

  # source://rails_admin//lib/rails_admin/abstract_model.rb#87
  def each_associated_children(object); end

  # do not store a reference to the model, does not play well with ActiveReload/Rails3.2
  #
  # source://rails_admin//lib/rails_admin/abstract_model.rb#59
  def model; end

  # Returns the value of attribute model_name.
  #
  # source://rails_admin//lib/rails_admin/abstract_model.rb#8
  def model_name; end

  # source://rails_admin//lib/rails_admin/abstract_model.rb#75
  def param_key; end

  # source://rails_admin//lib/rails_admin/abstract_model.rb#79
  def pretty_name; end

  # source://rails_admin//lib/rails_admin/abstract_model.rb#71
  def to_param; end

  # source://rails_admin//lib/rails_admin/abstract_model.rb#63
  def to_s; end

  # source://rails_admin//lib/rails_admin/abstract_model.rb#83
  def where(conditions); end

  private

  # source://rails_admin//lib/rails_admin/abstract_model.rb#102
  def initialize_active_record; end

  # source://rails_admin//lib/rails_admin/abstract_model.rb#113
  def initialize_mongoid; end

  # source://rails_admin//lib/rails_admin/abstract_model.rb#119
  def parse_field_value(field, value); end

  class << self
    # source://rails_admin//lib/rails_admin/abstract_model.rb#15
    def all(adapter = T.unsafe(nil)); end

    # source://rails_admin//lib/rails_admin/abstract_model.rb#7
    def all=(val); end

    # source://rails_admin//lib/rails_admin/abstract_model.rb#21
    def new(m); end

    def old_new(*_arg0); end

    # source://rails_admin//lib/rails_admin/abstract_model.rb#31
    def polymorphic_parents(adapter, model_name, name); end

    # source://rails_admin//lib/rails_admin/abstract_model.rb#11
    def reset; end

    # For testing
    #
    # source://rails_admin//lib/rails_admin/abstract_model.rb#43
    def reset_polymorphic_parents; end
  end
end

# source://rails_admin//lib/rails_admin/abstract_model.rb#123
class RailsAdmin::AbstractModel::StatementBuilder
  # @return [StatementBuilder] a new instance of StatementBuilder
  #
  # source://rails_admin//lib/rails_admin/abstract_model.rb#124
  def initialize(column, type, value, operator); end

  # source://rails_admin//lib/rails_admin/abstract_model.rb#131
  def to_statement; end

  protected

  # source://rails_admin//lib/rails_admin/abstract_model.rb#180
  def build_statement_for_date; end

  # source://rails_admin//lib/rails_admin/abstract_model.rb#199
  def build_statement_for_datetime_or_timestamp; end

  # source://rails_admin//lib/rails_admin/abstract_model.rb#159
  def build_statement_for_integer_decimal_or_float; end

  # source://rails_admin//lib/rails_admin/abstract_model.rb#155
  def build_statement_for_type; end

  # source://rails_admin//lib/rails_admin/abstract_model.rb#144
  def build_statement_for_type_generic; end

  # source://rails_admin//lib/rails_admin/abstract_model.rb#140
  def get_filtering_duration; end

  # source://rails_admin//lib/rails_admin/abstract_model.rb#210
  def range_filter(_min, _max); end

  # source://rails_admin//lib/rails_admin/abstract_model.rb#206
  def unary_operators; end
end

# source://rails_admin//lib/rails_admin/abstract_model.rb#214
class RailsAdmin::AbstractModel::StatementBuilder::FilteringDuration
  # @return [FilteringDuration] a new instance of FilteringDuration
  #
  # source://rails_admin//lib/rails_admin/abstract_model.rb#215
  def initialize(operator, value); end

  # source://rails_admin//lib/rails_admin/abstract_model.rb#248
  def between; end

  # source://rails_admin//lib/rails_admin/abstract_model.rb#252
  def default; end

  # source://rails_admin//lib/rails_admin/abstract_model.rb#220
  def get_duration; end

  # source://rails_admin//lib/rails_admin/abstract_model.rb#243
  def last_week; end

  # source://rails_admin//lib/rails_admin/abstract_model.rb#239
  def this_week; end

  # source://rails_admin//lib/rails_admin/abstract_model.rb#231
  def today; end

  # source://rails_admin//lib/rails_admin/abstract_model.rb#235
  def yesterday; end

  private

  # source://rails_admin//lib/rails_admin/abstract_model.rb#258
  def default_date; end
end

class RailsAdmin::ActionNotAllowed < ::StandardError; end

class RailsAdmin::ApplicationController < ::ActionController::Base
  include ::RailsAdmin::Extensions::ControllerExtension

  def _current_user; end
  def abstract_model; end
  def authorization_adapter; end
  def get_model; end
  def get_object; end
  def model_config; end
  def object; end
  def to_model_name(param); end

  private

  def _audit!; end
  def _authenticate!; end
  def _authorize!; end
  def _get_plugin_name; end

  # source://actionview/7.1.3.4/lib/action_view/layouts.rb#330
  def _layout(lookup_context, formats); end

  def _layout_from_proc; end
  def rails_admin_controller?; end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://actionpack/7.1.3.4/lib/abstract_controller/helpers.rb#12
    def _helper_methods; end

    # source://actionpack/7.1.3.4/lib/action_controller/metal.rb#262
    def middleware_stack; end

    # source://activesupport/7.1.3.4/lib/active_support/rescuable.rb#15
    def rescue_handlers; end
  end
end

module RailsAdmin::ApplicationController::HelperMethods
  include ::ActionText::ContentHelper
  include ::ActionText::TagHelper
  include ::Turbo::DriveHelper
  include ::Turbo::FramesHelper
  include ::Turbo::IncludesHelper
  include ::Turbo::StreamsHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::Turbo::Streams::ActionHelper
  include ::DeviseI18n::ViewHelpers
  include ::ActionController::Base::HelperMethods
  include ::RailsAdmin::ApplicationHelper

  def _current_user(*args, **_arg1, &block); end
  def _get_plugin_name(*args, **_arg1, &block); end
end

module RailsAdmin::ApplicationHelper
  def action(key, abstract_model = T.unsafe(nil), object = T.unsafe(nil)); end
  def actions(scope = T.unsafe(nil), abstract_model = T.unsafe(nil), object = T.unsafe(nil)); end
  def authorized?(action_name, abstract_model = T.unsafe(nil), object = T.unsafe(nil)); end
  def breadcrumb(action = T.unsafe(nil), _acc = T.unsafe(nil)); end
  def bulk_menu(abstract_model = T.unsafe(nil)); end
  def current_action?(action, abstract_model = T.unsafe(nil), object = T.unsafe(nil)); end
  def edit_user_link; end
  def flash_alert_class(flash_key); end
  def handle_asset_dependency_error; end
  def image_tag(source, options = T.unsafe(nil)); end
  def logout_method; end
  def logout_path; end
  def main_navigation; end
  def menu_for(parent, abstract_model = T.unsafe(nil), object = T.unsafe(nil), only_icon = T.unsafe(nil)); end
  def navigation(parent_groups, nodes, level = T.unsafe(nil)); end
  def root_navigation; end
  def static_navigation; end
  def wording_for(label, action = T.unsafe(nil), abstract_model = T.unsafe(nil), object = T.unsafe(nil)); end

  private

  def collapsible_stack(label, class_prefix, li_stack); end
  def edit_user_link_label; end
  def gravatar_url(email); end
end

# source://rails_admin//lib/rails_admin/extension.rb#9
RailsAdmin::CONFIGURATION_ADAPTERS = T.let(T.unsafe(nil), Hash)

# source://rails_admin//lib/rails_admin/support/csv_converter.rb#6
class RailsAdmin::CSVConverter
  # @return [CSVConverter] a new instance of CSVConverter
  #
  # source://rails_admin//lib/rails_admin/support/csv_converter.rb#7
  def initialize(objects = T.unsafe(nil), schema = T.unsafe(nil)); end

  # source://rails_admin//lib/rails_admin/support/csv_converter.rb#41
  def to_csv(options = T.unsafe(nil)); end

  private

  # source://rails_admin//lib/rails_admin/support/csv_converter.rb#67
  def export_field_for(method, model_config = T.unsafe(nil)); end

  # source://rails_admin//lib/rails_admin/support/csv_converter.rb#84
  def generate_csv_header; end

  # source://rails_admin//lib/rails_admin/support/csv_converter.rb#95
  def generate_csv_row(object); end

  # source://rails_admin//lib/rails_admin/support/csv_converter.rb#71
  def generate_csv_string(options); end
end

# source://rails_admin//lib/rails_admin/config/proxyable/proxy.rb#4
module RailsAdmin::Config
  class << self
    # Setup actions to be used.
    #
    # source://rails_admin//lib/rails_admin/config.rb#291
    def actions(&block); end

    # source://rails_admin//lib/rails_admin/config.rb#245
    def asset_source; end

    # Set where RailsAdmin fetches JS/CSS from, defaults to :sprockets
    #
    # source://rails_admin//lib/rails_admin/config.rb#85
    def asset_source=(_arg0); end

    # Setup auditing/versioning provider that observe objects lifecycle
    #
    # source://rails_admin//lib/rails_admin/config.rb#116
    def audit_with(*args, &block); end

    # Setup authentication to be run as a before filter
    # This is run inside the controller instance so you can setup any authentication you need to
    #
    # By default, the authentication will run via warden if available
    # and will run the default.
    #
    # If you use devise, this will authenticate the same as _authenticate_user!_
    #
    # @example Devise admin
    #   RailsAdmin.config do |config|
    #   config.authenticate_with do
    #   authenticate_admin!
    #   end
    #   end
    # @example Custom Warden
    #   RailsAdmin.config do |config|
    #   config.authenticate_with do
    #   warden.authenticate! scope: :paranoid
    #   end
    #   end
    # @see RailsAdmin::Config::DEFAULT_AUTHENTICATION
    #
    # source://rails_admin//lib/rails_admin/config.rb#110
    def authenticate_with(&blk); end

    # Setup authorization to be run as a before filter
    # This is run inside the controller instance so you can setup any authorization you need to.
    #
    # By default, there is no authorization.
    #
    # To use an authorization adapter, pass the name of the adapter. For example,
    # to use with CanCanCan[https://github.com/CanCanCommunity/cancancan/], pass it like this.
    #
    # See the wiki[https://github.com/railsadminteam/rails_admin/wiki] for more on authorization.
    #
    # @example Custom
    #   RailsAdmin.config do |config|
    #   config.authorize_with do
    #   redirect_to root_path unless warden.user.is_admin?
    #   end
    #   end
    # @example CanCanCan
    #   RailsAdmin.config do |config|
    #   config.authorize_with :cancancan
    #   end
    # @see RailsAdmin::Config::DEFAULT_AUTHORIZE
    #
    # source://rails_admin//lib/rails_admin/config.rb#153
    def authorize_with(*args, &block); end

    # Tell browsers whether to use the native HTML5 validations (novalidate form option).
    #
    # source://rails_admin//lib/rails_admin/config.rb#59
    def browser_validations; end

    # Tell browsers whether to use the native HTML5 validations (novalidate form option).
    #
    # source://rails_admin//lib/rails_admin/config.rb#59
    def browser_validations=(_arg0); end

    # hide blank fields in show view if true
    #
    # source://rails_admin//lib/rails_admin/config.rb#56
    def compact_show_view; end

    # hide blank fields in show view if true
    #
    # source://rails_admin//lib/rails_admin/config.rb#56
    def compact_show_view=(_arg0); end

    # Setup configuration using an extension-provided ConfigurationAdapter
    #
    # @example Custom configuration for role-based setup.
    #   RailsAdmin.config do |config|
    #   config.configure_with(:custom) do |config|
    #   config.models = ['User', 'Comment']
    #   config.roles  = {
    #   'Admin' => :all,
    #   'User'  => ['User']
    #   }
    #   end
    #   end
    # @yield [configuration]
    #
    # source://rails_admin//lib/rails_admin/config.rb#179
    def configure_with(extension); end

    # Setup a different method to determine the current user or admin logged in.
    # This is run inside the controller instance and made available as a helper.
    #
    # By default, _request.env["warden"].user_ or _current_user_ will be used.
    #
    # @example Custom
    #   RailsAdmin.config do |config|
    #   config.current_user_method do
    #   current_admin
    #   end
    #   end
    # @see RailsAdmin::Config::DEFAULT_CURRENT_USER
    #
    # source://rails_admin//lib/rails_admin/config.rb#197
    def current_user_method(&block); end

    # Default association limit
    #
    # source://rails_admin//lib/rails_admin/config.rb#47
    def default_associated_collection_limit; end

    # Default association limit
    #
    # source://rails_admin//lib/rails_admin/config.rb#47
    def default_associated_collection_limit=(_arg0); end

    # Fields to be hidden in show, create and update views
    #
    # source://rails_admin//lib/rails_admin/config.rb#40
    def default_hidden_fields; end

    # source://rails_admin//lib/rails_admin/config.rb#259
    def default_hidden_fields=(fields); end

    # Default items per page value used if a model level option has not
    # been configured
    #
    # source://rails_admin//lib/rails_admin/config.rb#44
    def default_items_per_page; end

    # Default items per page value used if a model level option has not
    # been configured
    #
    # source://rails_admin//lib/rails_admin/config.rb#44
    def default_items_per_page=(_arg0); end

    # Returns the value of attribute default_search_operator.
    #
    # source://rails_admin//lib/rails_admin/config.rb#49
    def default_search_operator; end

    # source://rails_admin//lib/rails_admin/config.rb#202
    def default_search_operator=(operator); end

    # Configuration option to specify which models you want to exclude.
    #
    # source://rails_admin//lib/rails_admin/config.rb#30
    def excluded_models; end

    # Configuration option to specify which models you want to exclude.
    #
    # source://rails_admin//lib/rails_admin/config.rb#30
    def excluded_models=(_arg0); end

    # set settings for `protect_from_forgery` method
    # By default, it raises exception upon invalid CSRF tokens
    #
    # source://rails_admin//lib/rails_admin/config.rb#66
    def forgery_protection_settings; end

    # set settings for `protect_from_forgery` method
    # By default, it raises exception upon invalid CSRF tokens
    #
    # source://rails_admin//lib/rails_admin/config.rb#66
    def forgery_protection_settings=(_arg0); end

    # Configuration option to specify a allowlist of models you want to RailsAdmin to work with.
    # The excluded_models list applies against the allowlist as well and further reduces the models
    # RailsAdmin will use.
    # If included_models is left empty ([]), then RailsAdmin will automatically use all the models
    # in your application (less any excluded_models you may have specified).
    #
    # source://rails_admin//lib/rails_admin/config.rb#37
    def included_models; end

    # Configuration option to specify a allowlist of models you want to RailsAdmin to work with.
    # The excluded_models list applies against the allowlist as well and further reduces the models
    # RailsAdmin will use.
    # If included_models is left empty ([]), then RailsAdmin will automatically use all the models
    # in your application (less any excluded_models you may have specified).
    #
    # source://rails_admin//lib/rails_admin/config.rb#37
    def included_models=(_arg0); end

    # Configuration option to specify which method names will be searched for
    # to be used as a label for object records. This defaults to [:name, :title]
    #
    # source://rails_admin//lib/rails_admin/config.rb#53
    def label_methods; end

    # Configuration option to specify which method names will be searched for
    # to be used as a label for object records. This defaults to [:name, :title]
    #
    # source://rails_admin//lib/rails_admin/config.rb#53
    def label_methods=(_arg0); end

    # Application title, can be an array of two elements
    #
    # source://rails_admin//lib/rails_admin/config.rb#27
    def main_app_name; end

    # Application title, can be an array of two elements
    #
    # source://rails_admin//lib/rails_admin/config.rb#27
    def main_app_name=(_arg0); end

    # Loads a model configuration instance from the registry or registers
    # a new one if one is yet to be added.
    #
    # First argument can be an instance of requested model, its class object,
    # its class name as a string or symbol or a RailsAdmin::AbstractModel
    # instance.
    #
    # If a block is given it is evaluated in the context of configuration instance.
    #
    # Returns given model's configuration
    #
    # @see RailsAdmin::Config.registry
    #
    # source://rails_admin//lib/rails_admin/config.rb#227
    def model(entity, &block); end

    # Returns all model configurations
    #
    # @see RailsAdmin::Config.registry
    #
    # source://rails_admin//lib/rails_admin/config.rb#301
    def models; end

    # pool of all found model names from the whole application
    #
    # source://rails_admin//lib/rails_admin/config.rb#211
    def models_pool; end

    # Bootstrap CSS classes used for Navigation bar
    #
    # source://rails_admin//lib/rails_admin/config.rb#75
    def navbar_css_classes; end

    # Bootstrap CSS classes used for Navigation bar
    #
    # source://rails_admin//lib/rails_admin/config.rb#75
    def navbar_css_classes=(_arg0); end

    # Returns the value of attribute navigation_static_label.
    #
    # source://rails_admin//lib/rails_admin/config.rb#82
    def navigation_static_label; end

    # Sets the attribute navigation_static_label
    #
    # @param value the value to set the attribute navigation_static_label to.
    #
    # source://rails_admin//lib/rails_admin/config.rb#82
    def navigation_static_label=(_arg0); end

    # accepts a hash of static links to be shown below the main navigation
    #
    # source://rails_admin//lib/rails_admin/config.rb#81
    def navigation_static_links; end

    # accepts a hash of static links to be shown below the main navigation
    #
    # source://rails_admin//lib/rails_admin/config.rb#81
    def navigation_static_links=(_arg0); end

    # set parent controller
    #
    # source://rails_admin//lib/rails_admin/config.rb#62
    def parent_controller; end

    # source://rails_admin//lib/rails_admin/config.rb#269
    def parent_controller=(name); end

    # Stores model configuration objects in a hash identified by model's class
    # name.
    #
    # @see RailsAdmin.config
    #
    # source://rails_admin//lib/rails_admin/config.rb#72
    def registry; end

    # Perform reset, then load RailsAdmin initializer again
    #
    # source://rails_admin//lib/rails_admin/config.rb#347
    def reload!; end

    # Reset all configurations to defaults.
    #
    # @see RailsAdmin::Config.registry
    #
    # source://rails_admin//lib/rails_admin/config.rb#308
    def reset; end

    # Reset a provided model's configuration.
    #
    # @see RailsAdmin::Config.registry
    #
    # source://rails_admin//lib/rails_admin/config.rb#341
    def reset_model(model); end

    # show Gravatar in Navigation bar
    #
    # source://rails_admin//lib/rails_admin/config.rb#78
    def show_gravatar; end

    # show Gravatar in Navigation bar
    #
    # source://rails_admin//lib/rails_admin/config.rb#78
    def show_gravatar=(_arg0); end

    # source://rails_admin//lib/rails_admin/config.rb#286
    def sidescroll=(_); end

    # source://rails_admin//lib/rails_admin/config.rb#282
    def total_columns_width=(_); end

    # Get all models that are configured as visible sorted by their weight and label.
    #
    # @see RailsAdmin::Config::Hideable
    #
    # source://rails_admin//lib/rails_admin/config.rb#355
    def visible_models(bindings); end

    private

    # source://rails_admin//lib/rails_admin/config.rb#367
    def viable_models; end

    # source://rails_admin//lib/rails_admin/config.rb#386
    def visible_models_with_bindings(bindings); end
  end
end

# source://rails_admin//lib/rails_admin/config/actions.rb#5
module RailsAdmin::Config::Actions
  class << self
    # source://rails_admin//lib/rails_admin/config/actions.rb#50
    def add_action(key, parent_class, parent, &block); end

    # source://rails_admin//lib/rails_admin/config/actions.rb#7
    def all(scope = T.unsafe(nil), bindings = T.unsafe(nil)); end

    # source://rails_admin//lib/rails_admin/config/actions.rb#72
    def bulk_delete(&block); end

    # source://rails_admin//lib/rails_admin/config/actions.rb#38
    def collection(key, parent_class = T.unsafe(nil), &block); end

    # source://rails_admin//lib/rails_admin/config/actions.rb#72
    def dashboard(&block); end

    # source://rails_admin//lib/rails_admin/config/actions.rb#72
    def delete(&block); end

    # source://rails_admin//lib/rails_admin/config/actions.rb#72
    def edit(&block); end

    # source://rails_admin//lib/rails_admin/config/actions.rb#72
    def export(&block); end

    # source://rails_admin//lib/rails_admin/config/actions.rb#32
    def find(custom_key, bindings = T.unsafe(nil)); end

    # source://rails_admin//lib/rails_admin/config/actions.rb#72
    def history_index(&block); end

    # source://rails_admin//lib/rails_admin/config/actions.rb#72
    def history_show(&block); end

    # source://rails_admin//lib/rails_admin/config/actions.rb#72
    def import(&block); end

    # source://rails_admin//lib/rails_admin/config/actions.rb#72
    def index(&block); end

    # source://rails_admin//lib/rails_admin/config/actions.rb#42
    def member(key, parent_class = T.unsafe(nil), &block); end

    # source://rails_admin//lib/rails_admin/config/actions.rb#72
    def new(&block); end

    # source://rails_admin//lib/rails_admin/config/actions.rb#65
    def register(name, klass = T.unsafe(nil)); end

    # source://rails_admin//lib/rails_admin/config/actions.rb#61
    def reset; end

    # source://rails_admin//lib/rails_admin/config/actions.rb#46
    def root(key, parent_class = T.unsafe(nil), &block); end

    # source://rails_admin//lib/rails_admin/config/actions.rb#72
    def show(&block); end

    # source://rails_admin//lib/rails_admin/config/actions.rb#72
    def show_in_app(&block); end

    private

    # source://rails_admin//lib/rails_admin/config/actions.rb#97
    def add_action_custom_key(action, &block); end

    # source://rails_admin//lib/rails_admin/config/actions.rb#81
    def init_actions!; end
  end
end

# source://rails_admin//lib/rails_admin/config/actions/base.rb#10
class RailsAdmin::Config::Actions::Base
  include ::RailsAdmin::Config::Proxyable
  include ::RailsAdmin::Config::Configurable
  include ::RailsAdmin::Config::Hideable
  extend ::RailsAdmin::Config::Configurable::ClassMethods

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def action_name(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def authorization_key(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def authorized(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def authorized?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def breadcrumb_parent(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def bulkable(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def bulkable?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def collection(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def collection?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def controller(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def custom_key(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def enabled(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def enabled?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def except(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def http_methods(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def i18n_key(*args, &block); end

  # Off API.
  #
  # source://rails_admin//lib/rails_admin/config/actions/base.rb#152
  def key; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def link_icon(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def link_target(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def member(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def member?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def only(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def root(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def root?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def route_fragment(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def show_in_menu(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def show_in_navigation(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def show_in_sidebar(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def sidebar_label(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def template_name(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def turbo(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def turbo?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def visible(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def visible?; end

  class << self
    # source://rails_admin//lib/rails_admin/config/actions/base.rb#156
    def key; end
  end
end

# source://rails_admin//lib/rails_admin/config/actions/bulk_delete.rb#6
class RailsAdmin::Config::Actions::BulkDelete < ::RailsAdmin::Config::Actions::Base
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def authorization_key(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def bulkable(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def bulkable?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def collection(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def controller(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def http_methods(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/actions/dashboard.rb#6
class RailsAdmin::Config::Actions::Dashboard < ::RailsAdmin::Config::Actions::Base
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def auditing_versions_limit(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def breadcrumb_parent(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def controller(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def history(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def history?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def link_icon(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def root(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def root?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def route_fragment(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def statistics(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def statistics?; end
end

# source://rails_admin//lib/rails_admin/config/actions/delete.rb#6
class RailsAdmin::Config::Actions::Delete < ::RailsAdmin::Config::Actions::Base
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def authorization_key(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def controller(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def http_methods(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def link_icon(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def member(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def route_fragment(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def writable(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def writable?; end
end

# source://rails_admin//lib/rails_admin/config/actions/edit.rb#6
class RailsAdmin::Config::Actions::Edit < ::RailsAdmin::Config::Actions::Base
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def controller(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def http_methods(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def link_icon(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def member(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def writable(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def writable?; end
end

# source://rails_admin//lib/rails_admin/config/actions/export.rb#6
class RailsAdmin::Config::Actions::Export < ::RailsAdmin::Config::Actions::Base
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def bulkable(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def bulkable?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def collection(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def controller(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def http_methods(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def link_icon(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/actions/history_index.rb#6
class RailsAdmin::Config::Actions::HistoryIndex < ::RailsAdmin::Config::Actions::Base
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def authorization_key(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def collection(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def controller(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def link_icon(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def route_fragment(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def template_name(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/actions/history_show.rb#6
class RailsAdmin::Config::Actions::HistoryShow < ::RailsAdmin::Config::Actions::Base
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def authorization_key(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def controller(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def link_icon(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def member(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def route_fragment(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def template_name(*args, &block); end
end

class RailsAdmin::Config::Actions::Import < ::RailsAdmin::Config::Actions::Base
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def collection(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def controller(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def http_methods(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def link_icon(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/actions/index.rb#8
class RailsAdmin::Config::Actions::Index < ::RailsAdmin::Config::Actions::Base
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def breadcrumb_parent(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def collection(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def controller(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def http_methods(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def link_icon(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def route_fragment(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/actions/new.rb#6
class RailsAdmin::Config::Actions::New < ::RailsAdmin::Config::Actions::Base
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def collection(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def controller(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def http_methods(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def link_icon(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def writable(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def writable?; end
end

# source://rails_admin//lib/rails_admin/config/actions/show.rb#6
class RailsAdmin::Config::Actions::Show < ::RailsAdmin::Config::Actions::Base
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def breadcrumb_parent(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def controller(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def link_icon(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def member(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def route_fragment(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/actions/show_in_app.rb#6
class RailsAdmin::Config::Actions::ShowInApp < ::RailsAdmin::Config::Actions::Base
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def controller(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def link_icon(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def member(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def turbo(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def turbo?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def visible(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def visible?; end
end

# A module for all configurables.
#
# source://rails_admin//lib/rails_admin/config/configurable.rb#7
module RailsAdmin::Config::Configurable
  mixes_in_class_methods ::RailsAdmin::Config::Configurable::ClassMethods

  # @return [Boolean]
  #
  # source://rails_admin//lib/rails_admin/config/configurable.rb#12
  def has_option?(name); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#23
  def register_deprecated_instance_option(option_name, replacement_option_name = T.unsafe(nil), &custom_error); end

  # Register an instance option for this object only
  #
  # source://rails_admin//lib/rails_admin/config/configurable.rb#18
  def register_instance_option(option_name, &default); end

  private

  # source://rails_admin//lib/rails_admin/config/configurable.rb#30
  def with_recurring(option_name, value_proc, default_proc); end

  class << self
    # @private
    #
    # source://rails_admin//lib/rails_admin/config/configurable.rb#8
    def included(base); end
  end
end

# source://rails_admin//lib/rails_admin/config/configurable.rb#47
module RailsAdmin::Config::Configurable::ClassMethods
  # Register a class option. Class option is a configuration
  # option that stores it's value within a class object's instance variable
  # and is accessed by a class method. Both go by the name of the option.
  #
  # source://rails_admin//lib/rails_admin/config/configurable.rb#100
  def register_class_option(option_name, &default); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#84
  def register_deprecated_instance_option(option_name, replacement_option_name = T.unsafe(nil), scope = T.unsafe(nil)); end

  # Register an instance option. Instance option is a configuration
  # option that stores its value within an instance variable and is
  # accessed by an instance method. Both go by the name of the option.
  #
  # source://rails_admin//lib/rails_admin/config/configurable.rb#51
  def register_instance_option(option_name, scope = T.unsafe(nil), &default); end
end

# source://rails_admin//lib/rails_admin/config/const_load_suppressor.rb#5
module RailsAdmin::Config::ConstLoadSuppressor
  class << self
    # source://rails_admin//lib/rails_admin/config/const_load_suppressor.rb#22
    def allowing; end

    # source://rails_admin//lib/rails_admin/config/const_load_suppressor.rb#9
    def suppressing; end

    private

    # source://rails_admin//lib/rails_admin/config/const_load_suppressor.rb#37
    def intercept_const_missing; end
  end
end

# source://rails_admin//lib/rails_admin/config/const_load_suppressor.rb#44
class RailsAdmin::Config::ConstLoadSuppressor::ConstProxy < ::BasicObject
  # @return [ConstProxy] a new instance of ConstProxy
  #
  # source://rails_admin//lib/rails_admin/config/const_load_suppressor.rb#47
  def initialize(name); end

  # source://rails_admin//lib/rails_admin/config/const_load_suppressor.rb#51
  def klass; end

  # source://rails_admin//lib/rails_admin/config/const_load_suppressor.rb#68
  def method_missing(method_name, *args, &block); end

  # Returns the value of attribute name.
  #
  # source://rails_admin//lib/rails_admin/config/const_load_suppressor.rb#45
  def name; end

  private

  # @return [Boolean]
  #
  # source://rails_admin//lib/rails_admin/config/const_load_suppressor.rb#72
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end
end

# source://rails_admin//lib/rails_admin/config.rb#21
RailsAdmin::Config::DEFAULT_AUDIT = T.let(T.unsafe(nil), Proc)

# RailsAdmin is setup to try and authenticate with warden
# If warden is found, then it will try to authenticate
#
# This is valid for custom warden setups, and also devise
# If you're using the admin setup for devise, you should set RailsAdmin to use the admin
#
# @see RailsAdmin::Config.authenticate_with
# @see RailsAdmin::Config.authorize_with
#
# source://rails_admin//lib/rails_admin/config.rb#17
RailsAdmin::Config::DEFAULT_AUTHENTICATION = T.let(T.unsafe(nil), Proc)

# source://rails_admin//lib/rails_admin/config.rb#19
RailsAdmin::Config::DEFAULT_AUTHORIZE = T.let(T.unsafe(nil), Proc)

# source://rails_admin//lib/rails_admin/config.rb#23
RailsAdmin::Config::DEFAULT_CURRENT_USER = T.let(T.unsafe(nil), Proc)

# source://rails_admin//lib/rails_admin/config/fields/group.rb#10
module RailsAdmin::Config::Fields
  # source://rails_admin//lib/rails_admin/config/fields.rb#10
  def default_factory; end

  class << self
    # source://rails_admin//lib/rails_admin/config/fields.rb#10
    def default_factory; end

    # Build an array of fields by the provided parent object's abstract_model's
    # property and association information. Each property and association is
    # passed to the registered field factories which will populate the fields
    # array that will be returned.
    #
    # @see RailsAdmin::Config::Fields.registry
    #
    # source://rails_admin//lib/rails_admin/config/fields.rb#48
    def factory(parent); end

    # Register a field factory to be included in the factory stack.
    #
    # Factories are invoked lifo (last in first out).
    #
    # @see RailsAdmin::Config::Fields.registry
    #
    # source://rails_admin//lib/rails_admin/config/fields.rb#75
    def register_factory(&block); end
  end
end

# source://rails_admin//lib/rails_admin/config/fields/association.rb#10
class RailsAdmin::Config::Fields::Association < ::RailsAdmin::Config::Fields::Base
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def associated_collection_cache_all(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def associated_collection_scope(*args, &block); end

  # Reader for the association's child model's configuration
  #
  # source://rails_admin//lib/rails_admin/config/fields/association.rb#80
  def associated_model_config; end

  # source://rails_admin//lib/rails_admin/config/fields/association.rb#123
  def associated_model_limit; end

  # Reader for the association's child model object's label method
  #
  # source://rails_admin//lib/rails_admin/config/fields/association.rb#85
  def associated_object_label_method; end

  # Returns params which are to be set in modals
  #
  # source://rails_admin//lib/rails_admin/config/fields/association.rb#95
  def associated_prepopulate_params; end

  # Reader for associated primary key
  #
  # source://rails_admin//lib/rails_admin/config/fields/association.rb#90
  def associated_primary_key; end

  # Reader for the association information hash
  #
  # source://rails_admin//lib/rails_admin/config/fields/association.rb#11
  def association; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def eager_load(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def inline_add(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def inline_edit(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def inverse_of(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def label(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/association.rb#15
  def method_name; end

  # has many?
  #
  # @return [Boolean]
  #
  # source://rails_admin//lib/rails_admin/config/fields/association.rb#115
  def multiple?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def nested_form(*args, &block); end

  # Reader whether this is a polymorphic association
  #
  # @return [Boolean]
  #
  # source://rails_admin//lib/rails_admin/config/fields/association.rb#100
  def polymorphic?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def pretty_value(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def removable(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def removable?; end

  # Reader for the association's value unformatted
  #
  # source://rails_admin//lib/rails_admin/config/fields/association.rb#110
  def value; end

  # @return [Boolean]
  #
  # source://rails_admin//lib/rails_admin/config/fields/association.rb#119
  def virtual?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def visible(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def visible?; end
end

# source://rails_admin//lib/rails_admin/config/fields/base.rb#12
class RailsAdmin::Config::Fields::Base
  include ::RailsAdmin::Config::Proxyable
  include ::RailsAdmin::Config::Configurable
  include ::RailsAdmin::Config::Hideable
  include ::RailsAdmin::Config::Groupable
  include ::RailsAdmin::Config::Inspectable
  extend ::RailsAdmin::Config::Configurable::ClassMethods

  # @return [Base] a new instance of Base
  #
  # source://rails_admin//lib/rails_admin/config/fields/base.rb#27
  def initialize(parent, name, properties); end

  # Returns the value of attribute abstract_model.
  #
  # source://rails_admin//lib/rails_admin/config/fields/base.rb#19
  def abstract_model; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def active(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def active?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def allowed_methods(*args, &block); end

  # Is this an association
  #
  # @return [Boolean]
  #
  # source://rails_admin//lib/rails_admin/config/fields/base.rb#289
  def association?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def children_fields(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def column_width(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def css_class(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def default_filter_operator(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def default_value(*args, &block); end

  # Returns the value of attribute defined.
  #
  # source://rails_admin//lib/rails_admin/config/fields/base.rb#20
  def defined; end

  # Sets the attribute defined
  #
  # @param value the value to set the attribute defined to.
  #
  # source://rails_admin//lib/rails_admin/config/fields/base.rb#20
  def defined=(_arg0); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def eager_load(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#85
  def eager_load?(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/base.rb#269
  def eager_load_values; end

  # @return [Boolean]
  #
  # source://rails_admin//lib/rails_admin/config/fields/base.rb#284
  def editable?; end

  # Reader for validation errors of the bound object
  #
  # source://rails_admin//lib/rails_admin/config/fields/base.rb#294
  def errors; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def export_value(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def filter_operators(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/base.rb#101
  def filter_options; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def filterable(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def filterable?; end

  # source://rails_admin//lib/rails_admin/config/fields/base.rb#381
  def form_default_value; end

  # source://rails_admin//lib/rails_admin/config/fields/base.rb#385
  def form_value; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def formatted_value(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/base.rb#358
  def generic_field_help; end

  # source://rails_admin//lib/rails_admin/config/fields/base.rb#354
  def generic_help; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def help(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def hint(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def html_attributes(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/base.rb#373
  def inverse_of; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def label(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def length(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/base.rb#377
  def method_name; end

  # Returns the value of attribute name.
  #
  # source://rails_admin//lib/rails_admin/config/fields/base.rb#19
  def name; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def nested_form(*args, &block); end

  # Inverse accessor whether this field is required.
  #
  # @see RailsAdmin::Config::Fields::Base.register_instance_option :required?
  #
  # source://rails_admin//lib/rails_admin/config/fields/base.rb#310
  def optional(state = T.unsafe(nil), &block); end

  # Writer to make field optional.
  #
  # @see RailsAdmin::Config::Fields::Base.optional
  #
  # source://rails_admin//lib/rails_admin/config/fields/base.rb#321
  def optional=(state); end

  # Reader whether field is optional.
  #
  # @return [Boolean]
  # @see RailsAdmin::Config::Fields::Base.register_instance_option :required?
  #
  # source://rails_admin//lib/rails_admin/config/fields/base.rb#303
  def optional?; end

  # Returns the value of attribute order.
  #
  # source://rails_admin//lib/rails_admin/config/fields/base.rb#20
  def order; end

  # Sets the attribute order
  #
  # @param value the value to set the attribute order to.
  #
  # source://rails_admin//lib/rails_admin/config/fields/base.rb#20
  def order=(_arg0); end

  # Returns the value of attribute parent.
  #
  # source://rails_admin//lib/rails_admin/config/fields/base.rb#19
  def parent; end

  # source://rails_admin//lib/rails_admin/config/fields/base.rb#369
  def parse_input(_params); end

  # source://rails_admin//lib/rails_admin/config/fields/base.rb#365
  def parse_value(value); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def partial(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def pretty_value(*args, &block); end

  # Returns the value of attribute properties.
  #
  # source://rails_admin//lib/rails_admin/config/fields/base.rb#19
  def properties; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def queryable(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def queryable?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def read_only(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def read_only?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def render(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def required(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def required?; end

  # Returns the value of attribute root.
  #
  # source://rails_admin//lib/rails_admin/config/fields/base.rb#19
  def root; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def search_operator(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def searchable(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def searchable_columns(*args, &block); end

  # Returns the value of attribute section.
  #
  # source://rails_admin//lib/rails_admin/config/fields/base.rb#20
  def section; end

  # Sets the attribute section
  #
  # @param value the value to set the attribute section to.
  #
  # source://rails_admin//lib/rails_admin/config/fields/base.rb#20
  def section=(_arg0); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def serial(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def serial?; end

  # source://rails_admin//lib/rails_admin/config/fields/base.rb#63
  def sort_column; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def sort_reverse(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def sort_reverse?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def sortable(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def sticky(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def sticky?; end

  # Reader for field's type
  #
  # source://rails_admin//lib/rails_admin/config/fields/base.rb#326
  def type; end

  # source://rails_admin//lib/rails_admin/config/fields/base.rb#43
  def type_css_class; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def valid_length(*args, &block); end

  # Reader for field's value
  #
  # source://rails_admin//lib/rails_admin/config/fields/base.rb#331
  def value; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def view_helper(*args, &block); end

  # @return [Boolean]
  #
  # source://rails_admin//lib/rails_admin/config/fields/base.rb#47
  def virtual?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def visible(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def visible?; end
end

# source://rails_admin//lib/rails_admin/config/fields/base.rb#22
RailsAdmin::Config::Fields::Base::NAMED_INSTANCE_VARIABLES = T.let(T.unsafe(nil), Array)

# A container for groups of fields in edit views
#
# source://rails_admin//lib/rails_admin/config/fields/group.rb#12
class RailsAdmin::Config::Fields::Group
  include ::RailsAdmin::Config::Proxyable
  include ::RailsAdmin::Config::Configurable
  include ::RailsAdmin::Config::Hideable
  extend ::RailsAdmin::Config::Configurable::ClassMethods

  # @return [Group] a new instance of Group
  #
  # source://rails_admin//lib/rails_admin/config/fields/group.rb#20
  def initialize(parent, name); end

  # Returns the value of attribute abstract_model.
  #
  # source://rails_admin//lib/rails_admin/config/fields/group.rb#17
  def abstract_model; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def active(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def active?; end

  # Defines a configuration for a field by proxying parent's field method
  # and setting the field's group as self
  #
  # @see RailsAdmin::Config::Fields.field
  #
  # source://rails_admin//lib/rails_admin/config/fields/group.rb#33
  def field(name, type = T.unsafe(nil), &block); end

  # Reader for fields attached to this group
  #
  # source://rails_admin//lib/rails_admin/config/fields/group.rb#42
  def fields; end

  # Defines configuration for fields by their type
  #
  # @see RailsAdmin::Config::Fields.fields_of_type
  #
  # source://rails_admin//lib/rails_admin/config/fields/group.rb#49
  def fields_of_type(type, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def help(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def label(*args, &block); end

  # Returns the value of attribute name.
  #
  # source://rails_admin//lib/rails_admin/config/fields/group.rb#17
  def name; end

  # Returns the value of attribute parent.
  #
  # source://rails_admin//lib/rails_admin/config/fields/group.rb#17
  def parent; end

  # Returns the value of attribute root.
  #
  # source://rails_admin//lib/rails_admin/config/fields/group.rb#17
  def root; end

  # Returns the value of attribute section.
  #
  # source://rails_admin//lib/rails_admin/config/fields/group.rb#18
  def section; end

  # Sets the attribute section
  #
  # @param value the value to set the attribute section to.
  #
  # source://rails_admin//lib/rails_admin/config/fields/group.rb#18
  def section=(_arg0); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def visible(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def visible?; end

  # Reader for fields that are marked as visible
  #
  # source://rails_admin//lib/rails_admin/config/fields/group.rb#56
  def visible_fields; end
end

# source://rails_admin//lib/rails_admin/config/fields/types.rb#10
module RailsAdmin::Config::Fields::Types
  class << self
    # source://rails_admin//lib/rails_admin/config/fields/types.rb#13
    def load(type); end

    # source://rails_admin//lib/rails_admin/config/fields/types.rb#17
    def register(type, klass = T.unsafe(nil)); end
  end
end

# source://rails_admin//lib/rails_admin/config/fields/types/action_text.rb#10
class RailsAdmin::Config::Fields::Types::ActionText < ::RailsAdmin::Config::Fields::Types::Text
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def css_location(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def js_location(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def partial(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def version(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def warn_dynamic_load(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/fields/types/active_record_enum.rb#9
class RailsAdmin::Config::Fields::Types::ActiveRecordEnum < ::RailsAdmin::Config::Fields::Types::Enum
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def enum(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/active_record_enum.rb#45
  def form_value; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def multiple(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def multiple?; end

  # source://rails_admin//lib/rails_admin/config/fields/types/active_record_enum.rb#38
  def parse_input(params); end

  # source://rails_admin//lib/rails_admin/config/fields/types/active_record_enum.rb#32
  def parse_value(value); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def pretty_value(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def queryable(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/active_record_enum.rb#12
  def type; end

  private

  # source://rails_admin//lib/rails_admin/config/fields/types/active_record_enum.rb#51
  def parse_input_value(value); end

  # source://rails_admin//lib/rails_admin/config/fields/types/active_record_enum.rb#55
  def type_cast_value(value); end
end

# source://rails_admin//lib/rails_admin/config/fields/types/active_storage.rb#9
class RailsAdmin::Config::Fields::Types::ActiveStorage < ::RailsAdmin::Config::Fields::Types::FileUpload
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def delete_method(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def direct(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def direct?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def eager_load(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def html_attributes(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def image(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def image?; end

  # source://rails_admin//lib/rails_admin/config/fields/types/active_storage.rb#43
  def resource_url(thumb = T.unsafe(nil)); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def thumb_method(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/active_storage.rb#57
  def value; end
end

# source://rails_admin//lib/rails_admin/config/fields/types/belongs_to_association.rb#9
class RailsAdmin::Config::Fields::Types::BelongsToAssociation < ::RailsAdmin::Config::Fields::Association
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def eager_load(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def filter_operators(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def formatted_value(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/belongs_to_association.rb#40
  def method_name; end

  # @return [Boolean]
  #
  # source://rails_admin//lib/rails_admin/config/fields/types/belongs_to_association.rb#44
  def multiple?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def partial(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def searchable(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/belongs_to_association.rb#36
  def selected_id; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def sortable(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/fields/types/boolean.rb#8
class RailsAdmin::Config::Fields::Types::Boolean < ::RailsAdmin::Config::Fields::Base
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def css_classes(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def export_value(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def filter_operators(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/boolean.rb#51
  def form_value; end

  # Accessor for field's help text displayed below input field.
  #
  # source://rails_admin//lib/rails_admin/config/fields/types/boolean.rb#59
  def generic_help; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def labels(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def nullable(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def nullable?; end

  # source://rails_admin//lib/rails_admin/config/fields/types/boolean.rb#63
  def parse_input(params); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def partial(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def pretty_value(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def view_helper(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/fields/types/bson_object_id.rb#10
class RailsAdmin::Config::Fields::Types::BsonObjectId < ::RailsAdmin::Config::Fields::Types::String
  # source://rails_admin//lib/rails_admin/config/fields/types/bson_object_id.rb#19
  def generic_help; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def label(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/bson_object_id.rb#35
  def parse_input(params); end

  # source://rails_admin//lib/rails_admin/config/fields/types/bson_object_id.rb#31
  def parse_value(value); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def read_only(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def sort_reverse(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def sort_reverse?; end
end

# source://rails_admin//lib/rails_admin/config/fields/types/ck_editor.rb#10
class RailsAdmin::Config::Fields::Types::CKEditor < ::RailsAdmin::Config::Fields::Types::Text
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def base_location(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def config_js(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def location(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def partial(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def version(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/fields/types/carrierwave.rb#10
class RailsAdmin::Config::Fields::Types::Carrierwave < ::RailsAdmin::Config::Fields::Types::FileUpload
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def cache_method(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def delete_method(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/carrierwave.rb#25
  def resource_url(thumb = T.unsafe(nil)); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def thumb_method(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/fields/types/citext.rb#9
class RailsAdmin::Config::Fields::Types::Citext < ::RailsAdmin::Config::Fields::Types::Text; end

# source://rails_admin//lib/rails_admin/config/fields/types/code_mirror.rb#10
class RailsAdmin::Config::Fields::Types::CodeMirror < ::RailsAdmin::Config::Fields::Types::Text
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def assets(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def config(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def css_location(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def js_location(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def partial(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def version(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/fields/types/color.rb#9
class RailsAdmin::Config::Fields::Types::Color < ::RailsAdmin::Config::Fields::Types::StringLike
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def color(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def export_value(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def partial(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def pretty_value(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def view_helper(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/fields/types/composite_keys_belongs_to_association.rb#9
class RailsAdmin::Config::Fields::Types::CompositeKeysBelongsToAssociation < ::RailsAdmin::Config::Fields::Types::BelongsToAssociation
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def allowed_methods(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/composite_keys_belongs_to_association.rb#20
  def parse_input(params); end

  # source://rails_admin//lib/rails_admin/config/fields/types/composite_keys_belongs_to_association.rb#16
  def selected_id; end
end

# source://rails_admin//lib/rails_admin/config/fields/types/date.rb#9
class RailsAdmin::Config::Fields::Types::Date < ::RailsAdmin::Config::Fields::Types::Datetime
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def date_format(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def datepicker_options(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def html_attributes(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def i18n_scope(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/date.rb#12
  def parse_value(value); end
end

# source://rails_admin//lib/rails_admin/config/fields/types/datetime.rb#10
class RailsAdmin::Config::Fields::Types::Datetime < ::RailsAdmin::Config::Fields::Base
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def date_format(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def datepicker_options(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def filter_operators(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/datetime.rb#25
  def filter_options; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def flatpickr_format(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/datetime.rb#89
  def form_value; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def formatted_value(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def html_attributes(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def i18n_scope(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#85
  def momentjs_format(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/datetime.rb#17
  def parse_input(params); end

  # source://rails_admin//lib/rails_admin/config/fields/types/datetime.rb#13
  def parse_value(value); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def partial(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def queryable(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def queryable?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def sort_reverse(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def sort_reverse?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def strftime_format(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/fields/types/decimal.rb#10
class RailsAdmin::Config::Fields::Types::Decimal < ::RailsAdmin::Config::Fields::Types::Numeric
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def html_attributes(*args, &block); end
end

# Field type that supports Paperclip file uploads
#
# source://rails_admin//lib/rails_admin/config/fields/types/dragonfly.rb#11
class RailsAdmin::Config::Fields::Types::Dragonfly < ::RailsAdmin::Config::Fields::Types::FileUpload
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def cache_method(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def delete_method(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def image(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def image?; end

  # source://rails_admin//lib/rails_admin/config/fields/types/dragonfly.rb#36
  def resource_url(thumb = T.unsafe(nil)); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def thumb_method(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/fields/types/enum.rb#9
class RailsAdmin::Config::Fields::Types::Enum < ::RailsAdmin::Config::Fields::Base
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def enum(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def enum_method(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def filter_operators(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def multiple(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def multiple?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def partial(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def pretty_value(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/fields/types/file_upload.rb#9
class RailsAdmin::Config::Fields::Types::FileUpload < ::RailsAdmin::Config::Fields::Base
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def allowed_methods(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def cache_method(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def cache_value(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def delete_method(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def export_value(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def html_attributes(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def image(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def image?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def link_name(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def partial(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def pretty_value(*args, &block); end

  # virtual class
  #
  # source://rails_admin//lib/rails_admin/config/fields/types/file_upload.rb#70
  def resource_url; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def thumb_method(*args, &block); end

  # @return [Boolean]
  #
  # source://rails_admin//lib/rails_admin/config/fields/types/file_upload.rb#74
  def virtual?; end
end

# source://rails_admin//lib/rails_admin/config/fields/types/float.rb#10
class RailsAdmin::Config::Fields::Types::Float < ::RailsAdmin::Config::Fields::Types::Numeric
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def html_attributes(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/fields/types/froala.rb#10
class RailsAdmin::Config::Fields::Types::Froala < ::RailsAdmin::Config::Fields::Types::Text
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def config_options(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def css_location(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def js_location(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def partial(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def version(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/fields/types/has_and_belongs_to_many_association.rb#10
class RailsAdmin::Config::Fields::Types::HasAndBelongsToManyAssociation < ::RailsAdmin::Config::Fields::Types::HasManyAssociation; end

# source://rails_admin//lib/rails_admin/config/fields/types/has_many_association.rb#10
class RailsAdmin::Config::Fields::Types::HasManyAssociation < ::RailsAdmin::Config::Fields::Association
  # source://rails_admin//lib/rails_admin/config/fields/types/has_many_association.rb#31
  def associated_prepopulate_params; end

  # Reader for validation errors of the bound object
  #
  # source://rails_admin//lib/rails_admin/config/fields/types/has_many_association.rb#27
  def errors; end

  # source://rails_admin//lib/rails_admin/config/fields/types/has_many_association.rb#22
  def method_name; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def orderable(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def partial(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/fields/types/has_one_association.rb#10
class RailsAdmin::Config::Fields::Types::HasOneAssociation < ::RailsAdmin::Config::Fields::Association
  # source://rails_admin//lib/rails_admin/config/fields/types/has_one_association.rb#38
  def associated_prepopulate_params; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def filter_operators(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def formatted_value(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/has_one_association.rb#30
  def method_name; end

  # @return [Boolean]
  #
  # source://rails_admin//lib/rails_admin/config/fields/types/has_one_association.rb#34
  def multiple?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def partial(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/has_one_association.rb#26
  def selected_id; end
end

# source://rails_admin//lib/rails_admin/config/fields/types/hidden.rb#9
class RailsAdmin::Config::Fields::Types::Hidden < ::RailsAdmin::Config::Fields::Types::StringLike
  # source://rails_admin//lib/rails_admin/config/fields/types/hidden.rb#24
  def generic_help; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def help(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def label(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def view_helper(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/fields/types/inet.rb#9
class RailsAdmin::Config::Fields::Types::Inet < ::RailsAdmin::Config::Fields::Base; end

# source://rails_admin//lib/rails_admin/config/fields/types/integer.rb#10
class RailsAdmin::Config::Fields::Types::Integer < ::RailsAdmin::Config::Fields::Types::Numeric
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def sort_reverse(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def sort_reverse?; end
end

# source://rails_admin//lib/rails_admin/config/fields/types/json.rb#10
class RailsAdmin::Config::Fields::Types::Json < ::RailsAdmin::Config::Fields::Types::Text
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def export_value(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def formatted_value(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/json.rb#30
  def parse_input(params); end

  # source://rails_admin//lib/rails_admin/config/fields/types/json.rb#26
  def parse_value(value); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def pretty_value(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/fields/types/multiple_active_storage.rb#9
class RailsAdmin::Config::Fields::Types::MultipleActiveStorage < ::RailsAdmin::Config::Fields::Types::MultipleFileUpload
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def attachment_class(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def delete_method(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def direct(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def direct?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def eager_load(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def html_attributes(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def keep_method(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/fields/types/multiple_active_storage.rb#12
class RailsAdmin::Config::Fields::Types::MultipleActiveStorage::ActiveStorageAttachment < ::RailsAdmin::Config::Fields::Types::MultipleFileUpload::AbstractAttachment
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def delete_value(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def image(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def image?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def keep_value(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/multiple_active_storage.rb#32
  def resource_url(thumb = T.unsafe(nil)); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def thumb_method(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/fields/types/multiple_carrierwave.rb#9
class RailsAdmin::Config::Fields::Types::MultipleCarrierwave < ::RailsAdmin::Config::Fields::Types::MultipleFileUpload
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def attachment_class(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def cache_method(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def delete_method(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def keep_method(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def reorderable(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def reorderable?; end

  # source://rails_admin//lib/rails_admin/config/fields/types/multiple_carrierwave.rb#52
  def value; end
end

# source://rails_admin//lib/rails_admin/config/fields/types/multiple_carrierwave.rb#12
class RailsAdmin::Config::Fields::Types::MultipleCarrierwave::CarrierwaveAttachment < ::RailsAdmin::Config::Fields::Types::MultipleFileUpload::AbstractAttachment
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def delete_value(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def keep_value(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/multiple_carrierwave.rb#25
  def resource_url(thumb = T.unsafe(nil)); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def thumb_method(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/fields/types/multiple_file_upload.rb#7
class RailsAdmin::Config::Fields::Types::MultipleFileUpload < ::RailsAdmin::Config::Fields::Base
  # @return [MultipleFileUpload] a new instance of MultipleFileUpload
  #
  # source://rails_admin//lib/rails_admin/config/fields/types/multiple_file_upload.rb#59
  def initialize(*args); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def allowed_methods(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/multiple_file_upload.rb#106
  def attachment(&block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def attachment_class(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/multiple_file_upload.rb#110
  def attachments; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def cache_method(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def delete_method(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def export_value(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def html_attributes(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def keep_method(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def partial(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def pretty_value(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def reorderable(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def reorderable?; end

  # virtual class
  #
  # @return [Boolean]
  #
  # source://rails_admin//lib/rails_admin/config/fields/types/multiple_file_upload.rb#121
  def virtual?; end
end

# source://rails_admin//lib/rails_admin/config/fields/types/multiple_file_upload.rb#10
class RailsAdmin::Config::Fields::Types::MultipleFileUpload::AbstractAttachment
  include ::RailsAdmin::Config::Proxyable
  include ::RailsAdmin::Config::Configurable
  extend ::RailsAdmin::Config::Configurable::ClassMethods

  # @return [AbstractAttachment] a new instance of AbstractAttachment
  #
  # source://rails_admin//lib/rails_admin/config/fields/types/multiple_file_upload.rb#16
  def initialize(value); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#85
  def delete_key(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def delete_value(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def image(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def image?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def keep_value(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def pretty_value(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/multiple_file_upload.rb#54
  def resource_url(_thumb = T.unsafe(nil)); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def thumb_method(*args, &block); end

  # Returns the value of attribute value.
  #
  # source://rails_admin//lib/rails_admin/config/fields/types/multiple_file_upload.rb#14
  def value; end
end

# source://rails_admin//lib/rails_admin/config/fields/types/numeric.rb#10
class RailsAdmin::Config::Fields::Types::Numeric < ::RailsAdmin::Config::Fields::Base
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def filter_operators(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def view_helper(*args, &block); end
end

# Field type that supports Paperclip file uploads
#
# source://rails_admin//lib/rails_admin/config/fields/types/paperclip.rb#11
class RailsAdmin::Config::Fields::Types::Paperclip < ::RailsAdmin::Config::Fields::Types::FileUpload
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def delete_method(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/paperclip.rb#23
  def resource_url(thumb = T.unsafe(nil)); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def thumb_method(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/fields/types/password.rb#10
class RailsAdmin::Config::Fields::Types::Password < ::RailsAdmin::Config::Fields::Types::String
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def formatted_value(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/password.rb#17
  def parse_input(params); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def pretty_value(*args, &block); end

  # Password field's value does not need to be read
  #
  # source://rails_admin//lib/rails_admin/config/fields/types/password.rb#30
  def value; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def view_helper(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def visible(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/fields/types/polymorphic_association.rb#10
class RailsAdmin::Config::Fields::Types::PolymorphicAssociation < ::RailsAdmin::Config::Fields::Types::BelongsToAssociation
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def allowed_methods(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/polymorphic_association.rb#54
  def associated_collection(type); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def associated_collection_cache_all(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def associated_collection_scope(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/polymorphic_association.rb#63
  def associated_model_config; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def eager_load(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def formatted_value(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/polymorphic_association.rb#85
  def parse_input(params); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def partial(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/polymorphic_association.rb#67
  def polymorphic_type_collection; end

  # source://rails_admin//lib/rails_admin/config/fields/types/polymorphic_association.rb#73
  def polymorphic_type_urls; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def searchable(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def sortable(*args, &block); end

  # Reader for field's value
  #
  # source://rails_admin//lib/rails_admin/config/fields/types/polymorphic_association.rb#81
  def value; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def visible(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def visible?; end
end

# source://rails_admin//lib/rails_admin/config/fields/types/serialized.rb#10
class RailsAdmin::Config::Fields::Types::Serialized < ::RailsAdmin::Config::Fields::Types::Text
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def formatted_value(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/serialized.rb#21
  def parse_input(params); end

  # source://rails_admin//lib/rails_admin/config/fields/types/serialized.rb#17
  def parse_value(value); end
end

# source://rails_admin//lib/rails_admin/config/fields/types/shrine.rb#9
class RailsAdmin::Config::Fields::Types::Shrine < ::RailsAdmin::Config::Fields::Types::FileUpload
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def cache_method(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def cache_value(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def delete_method(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def link_name(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/shrine.rb#47
  def resource_url(thumb = T.unsafe(nil)); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def thumb_method(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/fields/types/simple_mde.rb#10
class RailsAdmin::Config::Fields::Types::SimpleMDE < ::RailsAdmin::Config::Fields::Types::Text
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def css_location(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def instance_config(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def js_location(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def partial(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def version(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/fields/types/string.rb#9
class RailsAdmin::Config::Fields::Types::String < ::RailsAdmin::Config::Fields::Types::StringLike
  # source://rails_admin//lib/rails_admin/config/fields/types/string.rb#24
  def generic_help; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def html_attributes(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/string.rb#12
  def input_size; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def partial(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/fields/types/string_like.rb#9
class RailsAdmin::Config::Fields::Types::StringLike < ::RailsAdmin::Config::Fields::Base
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def filter_operators(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/string_like.rb#18
  def parse_input(params); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def treat_empty_as_nil(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def treat_empty_as_nil?; end
end

# source://rails_admin//lib/rails_admin/config/fields/types/text.rb#10
class RailsAdmin::Config::Fields::Types::Text < ::RailsAdmin::Config::Fields::Types::StringLike
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def html_attributes(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def partial(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/fields/types/time.rb#9
class RailsAdmin::Config::Fields::Types::Time < ::RailsAdmin::Config::Fields::Types::Datetime
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def datepicker_options(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def filter_operators(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/fields/types/time.rb#12
  def parse_value(value); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def strftime_format(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/fields/types/timestamp.rb#10
class RailsAdmin::Config::Fields::Types::Timestamp < ::RailsAdmin::Config::Fields::Types::Datetime; end

# source://rails_admin//lib/rails_admin/config/fields/types/uuid.rb#9
class RailsAdmin::Config::Fields::Types::Uuid < ::RailsAdmin::Config::Fields::Types::String; end

# source://rails_admin//lib/rails_admin/config/fields/types/wysihtml5.rb#10
class RailsAdmin::Config::Fields::Types::Wysihtml5 < ::RailsAdmin::Config::Fields::Types::Text
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def config_options(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def css_location(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def js_location(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def partial(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def version(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/groupable.rb#7
module RailsAdmin::Config::Groupable
  # Register a group instance variable and accessor methods for objects
  # extending the has groups mixin. The extended objects must implement
  # reader for a parent object which includes this module.
  #
  # @see RailsAdmin::Config::HasGroups.group
  # @see RailsAdmin::Config::Fields::Group
  #
  # source://rails_admin//lib/rails_admin/config/groupable.rb#14
  def group(name = T.unsafe(nil)); end
end

# Provides accessor and autoregistering of model's description.
#
# source://rails_admin//lib/rails_admin/config/has_description.rb#6
module RailsAdmin::Config::HasDescription
  # source://rails_admin//lib/rails_admin/config/has_description.rb#9
  def desc(description, &_block); end

  # Returns the value of attribute description.
  #
  # source://rails_admin//lib/rails_admin/config/has_description.rb#7
  def description; end
end

# Provides accessors and autoregistering of model's fields.
#
# source://rails_admin//lib/rails_admin/config/has_fields.rb#6
module RailsAdmin::Config::HasFields
  # Accessor for all fields
  #
  # source://rails_admin//lib/rails_admin/config/has_fields.rb#108
  def all_fields; end

  # configure field(s) from the default group in a section without changing the original order.
  #
  # source://rails_admin//lib/rails_admin/config/has_fields.rb#43
  def configure(name, type = T.unsafe(nil), &block); end

  # exclude fields by name or by condition (block)
  #
  # source://rails_admin//lib/rails_admin/config/has_fields.rb#63
  def exclude_fields(*field_names, &block); end

  # exclude fields by name or by condition (block)
  # API candy
  #
  # source://rails_admin//lib/rails_admin/config/has_fields.rb#63
  def exclude_fields_if(*field_names, &block); end

  # Defines a configuration for a field.
  #
  # source://rails_admin//lib/rails_admin/config/has_fields.rb#8
  def field(name, type = T.unsafe(nil), add_to_section = T.unsafe(nil), &block); end

  # Returns all field configurations for the model configuration instance. If no fields
  # have been defined returns all fields. Defined fields are sorted to match their
  # order property. If order was not specified it will match the order in which fields
  # were defined.
  #
  # If a block is passed it will be evaluated in the context of each field
  #
  # source://rails_admin//lib/rails_admin/config/has_fields.rb#83
  def fields(*field_names, &block); end

  # Defines configuration for fields by their type.
  #
  # source://rails_admin//lib/rails_admin/config/has_fields.rb#103
  def fields_of_type(type, &block); end

  # source://rails_admin//lib/rails_admin/config/has_fields.rb#73
  def include_all_fields; end

  # include fields by name and apply an optional block to each (through a call to fields),
  # or include fields by conditions if no field names
  #
  # source://rails_admin//lib/rails_admin/config/has_fields.rb#49
  def include_fields(*field_names, &block); end

  # include fields by name and apply an optional block to each (through a call to fields),
  # or include fields by conditions if no field names
  #
  # source://rails_admin//lib/rails_admin/config/has_fields.rb#49
  def include_fields_if(*field_names, &block); end

  # source://rails_admin//lib/rails_admin/config/has_fields.rb#121
  def possible_fields; end

  # Get all fields defined as visible, in the correct order.
  #
  # source://rails_admin//lib/rails_admin/config/has_fields.rb#116
  def visible_fields; end

  protected

  # Raw fields.
  # Recursively returns parent section's raw fields
  # Duping it if accessed for modification.
  #
  # source://rails_admin//lib/rails_admin/config/has_fields.rb#130
  def _fields(readonly = T.unsafe(nil)); end
end

# source://rails_admin//lib/rails_admin/config/has_groups.rb#7
module RailsAdmin::Config::HasGroups
  # Accessor for a group
  #
  # If group with given name does not yet exist it will be created. If a
  # block is passed it will be evaluated in the context of the group
  #
  # source://rails_admin//lib/rails_admin/config/has_groups.rb#12
  def group(name, &block); end

  # Reader for groups that are marked as visible
  #
  # source://rails_admin//lib/rails_admin/config/has_groups.rb#20
  def visible_groups; end
end

# Defines a visibility configuration
#
# source://rails_admin//lib/rails_admin/config/hideable.rb#6
module RailsAdmin::Config::Hideable
  # Reader whether object is hidden.
  #
  # @return [Boolean]
  #
  # source://rails_admin//lib/rails_admin/config/hideable.rb#15
  def hidden?; end

  # Writer to hide object.
  #
  # source://rails_admin//lib/rails_admin/config/hideable.rb#20
  def hide(&block); end

  # Writer to show field.
  #
  # source://rails_admin//lib/rails_admin/config/hideable.rb#25
  def show(&block); end

  class << self
    # Visibility defaults to true.
    #
    # source://rails_admin//lib/rails_admin/config/hideable.rb#8
    def included(klass); end
  end
end

# source://rails_admin//lib/rails_admin/config/inspectable.rb#5
module RailsAdmin::Config::Inspectable
  # source://rails_admin//lib/rails_admin/config/inspectable.rb#6
  def inspect; end

  private

  # source://rails_admin//lib/rails_admin/config/inspectable.rb#21
  def instance_variable_name(variable); end

  # source://rails_admin//lib/rails_admin/config/inspectable.rb#34
  def set_named_instance_variables; end
end

# source://rails_admin//lib/rails_admin/config/lazy_model.rb#7
class RailsAdmin::Config::LazyModel < ::BasicObject
  # @return [LazyModel] a new instance of LazyModel
  #
  # source://rails_admin//lib/rails_admin/config/lazy_model.rb#8
  def initialize(entity, &block); end

  # source://rails_admin//lib/rails_admin/config/lazy_model.rb#14
  def add_deferred_block(&block); end

  # source://rails_admin//lib/rails_admin/config/lazy_model.rb#65
  def method_missing(method_name, *args, &block); end

  # source://rails_admin//lib/rails_admin/config/lazy_model.rb#22
  def target; end

  private

  # @return [Boolean]
  #
  # source://rails_admin//lib/rails_admin/config/lazy_model.rb#69
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end
end

# Model specific configuration object.
#
# source://rails_admin//lib/rails_admin/config/model.rb#19
class RailsAdmin::Config::Model
  include ::RailsAdmin::Config::Proxyable
  include ::RailsAdmin::Config::Configurable
  include ::RailsAdmin::Config::Hideable
  include ::RailsAdmin::Config::Sections
  include ::RailsAdmin::Config::Inspectable
  extend ::RailsAdmin::Config::Configurable::ClassMethods

  # @return [Model] a new instance of Model
  #
  # source://rails_admin//lib/rails_admin/config/model.rb#31
  def initialize(entity); end

  # Returns the value of attribute abstract_model.
  #
  # source://rails_admin//lib/rails_admin/config/model.rb#26
  def abstract_model; end

  # source://rails_admin//lib/rails_admin/config/sections.rb#29
  def base(&block); end

  # source://rails_admin//lib/rails_admin/config/sections.rb#29
  def create(&block); end

  # source://rails_admin//lib/rails_admin/config/sections.rb#29
  def edit(&block); end

  # @return [Boolean]
  #
  # source://rails_admin//lib/rails_admin/config/model.rb#50
  def excluded?; end

  # source://rails_admin//lib/rails_admin/config/sections.rb#29
  def export(&block); end

  # Returns the value of attribute groups.
  #
  # source://rails_admin//lib/rails_admin/config/model.rb#27
  def groups; end

  # Sets the attribute groups
  #
  # @param value the value to set the attribute groups to.
  #
  # source://rails_admin//lib/rails_admin/config/model.rb#27
  def groups=(_arg0); end

  # source://rails_admin_import/3.0.4/lib/rails_admin_import/config/sections/import.rb#29
  def import(&block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def label(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def label_plural(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def last_created_at(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/sections.rb#29
  def list(&block); end

  # Act as a proxy for the base section configuration that actually
  # store the configurations.
  #
  # source://rails_admin//lib/rails_admin/config/model.rb#115
  def method_missing(method_name, *args, &block); end

  # source://rails_admin//lib/rails_admin/config/sections.rb#29
  def modal(&block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def navigation_icon(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def navigation_label(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/sections.rb#29
  def nested(&block); end

  # source://rails_admin//lib/rails_admin/config/model.rb#56
  def object_label; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def object_label_method(*args, &block); end

  # Returns the value of attribute parent.
  #
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def parent(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/model.rb#77
  def pluralize(count); end

  # Returns the value of attribute root.
  #
  # source://rails_admin//lib/rails_admin/config/model.rb#26
  def root; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def scope(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/sections.rb#29
  def show(&block); end

  # source://rails_admin//lib/rails_admin/config/sections.rb#29
  def update(&block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def visible(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def visible?; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def weight(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/model.rb#29
RailsAdmin::Config::Model::NAMED_INSTANCE_VARIABLES = T.let(T.unsafe(nil), Array)

# source://rails_admin//lib/rails_admin/config/proxyable/proxy.rb#5
module RailsAdmin::Config::Proxyable
  # source://rails_admin//lib/rails_admin/config/proxyable.rb#7
  def bindings; end

  # source://rails_admin//lib/rails_admin/config/proxyable.rb#12
  def bindings=(new_bindings); end

  # source://rails_admin//lib/rails_admin/config/proxyable.rb#21
  def with(bindings = T.unsafe(nil)); end
end

# source://rails_admin//lib/rails_admin/config/proxyable/proxy.rb#6
class RailsAdmin::Config::Proxyable::Proxy < ::BasicObject
  # @return [Proxy] a new instance of Proxy
  #
  # source://rails_admin//lib/rails_admin/config/proxyable/proxy.rb#7
  def initialize(object, bindings = T.unsafe(nil)); end

  # Bind variables to be used by the configuration options
  #
  # source://rails_admin//lib/rails_admin/config/proxyable/proxy.rb#13
  def bind(key, value = T.unsafe(nil)); end

  # source://rails_admin//lib/rails_admin/config/proxyable/proxy.rb#22
  def method_missing(method_name, *args, &block); end
end

# Sections describe different views in the RailsAdmin engine. Configurable sections are
# list and navigation.
#
# Each section's class object can store generic configuration about that section (such as the
# number of visible tabs in the main navigation), while the instances (accessed via model
# configuration objects) store model specific configuration (such as the visibility of the
# model).
#
# source://rails_admin//lib/rails_admin/config/sections/base.rb#12
module RailsAdmin::Config::Sections
  class << self
    # @private
    #
    # source://rails_admin//lib/rails_admin/config/sections.rb#24
    def included(klass); end
  end
end

# Configuration of the show view for a new object
#
# source://rails_admin//lib/rails_admin/config/sections/base.rb#14
class RailsAdmin::Config::Sections::Base
  include ::RailsAdmin::Config::Proxyable
  include ::RailsAdmin::Config::Configurable
  include ::RailsAdmin::Config::Inspectable
  include ::RailsAdmin::Config::HasFields
  include ::RailsAdmin::Config::HasGroups
  include ::RailsAdmin::Config::HasDescription
  extend ::RailsAdmin::Config::Configurable::ClassMethods

  # @return [Base] a new instance of Base
  #
  # source://rails_admin//lib/rails_admin/config/sections/base.rb#27
  def initialize(parent); end

  # Returns the value of attribute abstract_model.
  #
  # source://rails_admin//lib/rails_admin/config/sections/base.rb#23
  def abstract_model; end

  # Returns the value of attribute parent.
  #
  # source://rails_admin//lib/rails_admin/config/sections/base.rb#23
  def parent; end

  # Returns the value of attribute root.
  #
  # source://rails_admin//lib/rails_admin/config/sections/base.rb#23
  def root; end
end

# source://rails_admin//lib/rails_admin/config/sections/base.rb#25
RailsAdmin::Config::Sections::Base::NAMED_INSTANCE_VARIABLES = T.let(T.unsafe(nil), Array)

# Configuration of the edit view for a new object
#
# source://rails_admin//lib/rails_admin/config/sections/create.rb#9
class RailsAdmin::Config::Sections::Create < ::RailsAdmin::Config::Sections::Edit; end

# Configuration of the edit view for an existing object
#
# source://rails_admin//lib/rails_admin/config/sections/edit.rb#9
class RailsAdmin::Config::Sections::Edit < ::RailsAdmin::Config::Sections::Base; end

# Configuration of the navigation view
#
# source://rails_admin//lib/rails_admin/config/sections/export.rb#9
class RailsAdmin::Config::Sections::Export < ::RailsAdmin::Config::Sections::Base; end

class RailsAdmin::Config::Sections::Import < ::RailsAdmin::Config::Sections::Base
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def default_excluded_fields(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def mapping_key(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def mapping_key_list(*args, &block); end
end

# Configuration of the list view
#
# source://rails_admin//lib/rails_admin/config/sections/list.rb#9
class RailsAdmin::Config::Sections::List < ::RailsAdmin::Config::Sections::Base
  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def checkboxes(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#60
  def checkboxes?; end

  # source://rails_admin//lib/rails_admin/config/sections/list.rb#53
  def fields_for_table; end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def filters(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def items_per_page(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def limited_pagination(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def row_css_class(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def scopes(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def search_by(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def search_help(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#85
  def sidescroll(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def sort_by(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#85
  def sort_reverse(*args, &block); end
end

# source://rails_admin//lib/rails_admin/config/sections/modal.rb#8
class RailsAdmin::Config::Sections::Modal < ::RailsAdmin::Config::Sections::Edit; end

# source://rails_admin//lib/rails_admin/config/sections/nested.rb#8
class RailsAdmin::Config::Sections::Nested < ::RailsAdmin::Config::Sections::Edit; end

# source://rails_admin//lib/rails_admin/config/sections/show.rb#8
class RailsAdmin::Config::Sections::Show < ::RailsAdmin::Config::Sections::Base; end

# source://rails_admin//lib/rails_admin/config/sections/update.rb#8
class RailsAdmin::Config::Sections::Update < ::RailsAdmin::Config::Sections::Edit; end

# source://rails_admin//lib/rails_admin/extension.rb#6
RailsAdmin::EXTENSIONS = T.let(T.unsafe(nil), Array)

# source://rails_admin//lib/rails_admin/engine.rb#11
class RailsAdmin::Engine < ::Rails::Engine
  # Returns the value of attribute importmap.
  #
  # source://rails_admin//lib/rails_admin/engine.rb#14
  def importmap; end

  # Sets the attribute importmap
  #
  # @param value the value to set the attribute importmap to.
  #
  # source://rails_admin//lib/rails_admin/engine.rb#14
  def importmap=(_arg0); end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#70
    def __callbacks; end
  end
end

# source://rails_admin//lib/rails_admin/extensions/controller_extension.rb#4
module RailsAdmin::Extensions; end

# source://rails_admin//lib/rails_admin/extensions/cancancan/authorization_adapter.rb#5
module RailsAdmin::Extensions::CanCanCan; end

# This adapter is for the CanCanCan[https://github.com/CanCanCommunity/cancancan] authorization library.
#
# source://rails_admin//lib/rails_admin/extensions/cancancan/authorization_adapter.rb#7
class RailsAdmin::Extensions::CanCanCan::AuthorizationAdapter
  include ::RailsAdmin::Config::Configurable
  extend ::RailsAdmin::Config::Configurable::ClassMethods

  # See the +authorize_with+ config method for where the initialization happens.
  #
  # @return [AuthorizationAdapter] a new instance of AuthorizationAdapter
  #
  # source://rails_admin//lib/rails_admin/extensions/cancancan/authorization_adapter.rb#23
  def initialize(controller, ability = T.unsafe(nil), &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def ability_class(*args, &block); end

  # This is called in the new/create actions to determine the initial attributes for new
  # records. It should return a hash of attributes which match what the user
  # is authorized to create.
  #
  # source://rails_admin//lib/rails_admin/extensions/cancancan/authorization_adapter.rb#72
  def attributes_for(action, abstract_model); end

  # This method is called in every controller action and should raise an exception
  # when the authorization fails. The first argument is the name of the controller
  # action as a symbol (:create, :bulk_delete, etc.). The second argument is the
  # AbstractModel instance that applies. The third argument is the actual model
  # instance if it is available.
  #
  # source://rails_admin//lib/rails_admin/extensions/cancancan/authorization_adapter.rb#44
  def authorize(action, abstract_model = T.unsafe(nil), model_object = T.unsafe(nil)); end

  # This method is called primarily from the view to determine whether the given user
  # has access to perform the action on a given model. It should return true when authorized.
  # This takes the same arguments as +authorize+. The difference is that this will
  # return a boolean whereas +authorize+ will raise an exception when not authorized.
  #
  # @return [Boolean]
  #
  # source://rails_admin//lib/rails_admin/extensions/cancancan/authorization_adapter.rb#55
  def authorized?(action, abstract_model = T.unsafe(nil), model_object = T.unsafe(nil)); end

  # This is called when needing to scope a database query. It is called within the list
  # and bulk_delete/destroy actions and should return a scope which limits the records
  # to those which the user can perform the given action on.
  #
  # source://rails_admin//lib/rails_admin/extensions/cancancan/authorization_adapter.rb#65
  def query(action, abstract_model); end

  private

  # source://rails_admin//lib/rails_admin/extensions/cancancan/authorization_adapter.rb#78
  def resolve_action_and_subject(action, abstract_model, model_object); end

  class << self
    # source://rails_admin//lib/rails_admin/extensions/cancancan/authorization_adapter.rb#18
    def setup; end
  end
end

# source://rails_admin//lib/rails_admin/extensions/cancancan/authorization_adapter.rb#8
module RailsAdmin::Extensions::CanCanCan::AuthorizationAdapter::ControllerExtension
  # source://rails_admin//lib/rails_admin/extensions/cancancan/authorization_adapter.rb#9
  def current_ability; end
end

# source://rails_admin//lib/rails_admin/extensions/controller_extension.rb#5
module RailsAdmin::Extensions::ControllerExtension; end

# source://rails_admin//lib/rails_admin/extensions/paper_trail/auditing_adapter.rb#7
module RailsAdmin::Extensions::PaperTrail; end

# source://rails_admin//lib/rails_admin/extensions/paper_trail/auditing_adapter.rb#46
class RailsAdmin::Extensions::PaperTrail::AuditingAdapter
  include ::RailsAdmin::Config::Configurable
  extend ::RailsAdmin::Config::Configurable::ClassMethods

  # @return [AuditingAdapter] a new instance of AuditingAdapter
  #
  # source://rails_admin//lib/rails_admin/extensions/paper_trail/auditing_adapter.rb#81
  def initialize(controller, user_class_name = T.unsafe(nil), version_class_name = T.unsafe(nil), &block); end

  # source://rails_admin//lib/rails_admin/extensions/paper_trail/auditing_adapter.rb#121
  def create_object(_object, _abstract_model, _user); end

  # source://rails_admin//lib/rails_admin/extensions/paper_trail/auditing_adapter.rb#113
  def delete_object(_object, _model, _user); end

  # source://rails_admin//lib/rails_admin/extensions/paper_trail/auditing_adapter.rb#107
  def latest(count = T.unsafe(nil)); end

  # source://rails_admin//lib/rails_admin/extensions/paper_trail/auditing_adapter.rb#125
  def listing_for_model(model, query, sort, sort_reverse, all, page, per_page = T.unsafe(nil)); end

  # source://rails_admin//lib/rails_admin/extensions/paper_trail/auditing_adapter.rb#129
  def listing_for_object(model, object, query, sort, sort_reverse, all, page, per_page = T.unsafe(nil)); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def sort_by(*args, &block); end

  # source://rails_admin//lib/rails_admin/extensions/paper_trail/auditing_adapter.rb#117
  def update_object(_object, _model, _user, _changes); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def user_class(*args, &block); end

  # source://rails_admin//lib/rails_admin/config/configurable.rb#66
  def version_class(*args, &block); end

  protected

  # - model - a RailsAdmin::AbstractModel
  #
  # source://rails_admin//lib/rails_admin/extensions/paper_trail/auditing_adapter.rb#136
  def listing_for_model_or_object(model, object, query, sort, sort_reverse, all, page, per_page); end

  # PT can be configured to use [custom version
  # classes](https://github.com/paper-trail-gem/paper_trail#6a-custom-version-classes)
  #
  # ```ruby
  # has_paper_trail versions: { class_name: 'MyVersion' }
  # ```
  #
  # source://rails_admin//lib/rails_admin/extensions/paper_trail/auditing_adapter.rb#181
  def version_class_for(model); end

  # source://rails_admin//lib/rails_admin/extensions/paper_trail/auditing_adapter.rb#161
  def versions_for_model(model); end

  class << self
    # source://rails_admin//lib/rails_admin/extensions/paper_trail/auditing_adapter.rb#75
    def setup; end
  end
end

# source://rails_admin//lib/rails_admin/extensions/paper_trail/auditing_adapter.rb#47
RailsAdmin::Extensions::PaperTrail::AuditingAdapter::COLUMN_MAPPING = T.let(T.unsafe(nil), Hash)

# source://rails_admin//lib/rails_admin/extensions/paper_trail/auditing_adapter.rb#54
RailsAdmin::Extensions::PaperTrail::AuditingAdapter::E_USER_CLASS_NOT_SET = T.let(T.unsafe(nil), String)

# source://rails_admin//lib/rails_admin/extensions/paper_trail/auditing_adapter.rb#61
RailsAdmin::Extensions::PaperTrail::AuditingAdapter::E_VERSION_MODEL_NOT_SET = T.let(T.unsafe(nil), String)

# source://rails_admin//lib/rails_admin/extensions/paper_trail/auditing_adapter.rb#40
module RailsAdmin::Extensions::PaperTrail::ControllerExtension
  # source://rails_admin//lib/rails_admin/extensions/paper_trail/auditing_adapter.rb#41
  def user_for_paper_trail; end
end

# source://rails_admin//lib/rails_admin/extensions/paper_trail/auditing_adapter.rb#8
class RailsAdmin::Extensions::PaperTrail::VersionProxy
  # @return [VersionProxy] a new instance of VersionProxy
  #
  # source://rails_admin//lib/rails_admin/extensions/paper_trail/auditing_adapter.rb#9
  def initialize(version, user_class = T.unsafe(nil)); end

  # source://rails_admin//lib/rails_admin/extensions/paper_trail/auditing_adapter.rb#19
  def created_at; end

  # source://rails_admin//lib/rails_admin/extensions/paper_trail/auditing_adapter.rb#35
  def item; end

  # source://rails_admin//lib/rails_admin/extensions/paper_trail/auditing_adapter.rb#14
  def message; end

  # source://rails_admin//lib/rails_admin/extensions/paper_trail/auditing_adapter.rb#23
  def table; end

  # source://rails_admin//lib/rails_admin/extensions/paper_trail/auditing_adapter.rb#27
  def username; end
end

# source://rails_admin//lib/rails_admin/extensions/pundit/authorization_adapter.rb#5
module RailsAdmin::Extensions::Pundit; end

# This adapter is for the Pundit[https://github.com/elabs/pundit] authorization library.
# You can create another adapter for different authorization behavior, just be certain it
# responds to each of the public methods here.
#
# source://rails_admin//lib/rails_admin/extensions/pundit/authorization_adapter.rb#9
class RailsAdmin::Extensions::Pundit::AuthorizationAdapter
  # See the +authorize_with+ config method for where the initialization happens.
  #
  # @return [AuthorizationAdapter] a new instance of AuthorizationAdapter
  #
  # source://rails_admin//lib/rails_admin/extensions/pundit/authorization_adapter.rb#16
  def initialize(controller); end

  # This is called in the new/create actions to determine the initial attributes for new
  # records. It should return a hash of attributes which match what the user
  # is authorized to create.
  #
  # source://rails_admin//lib/rails_admin/extensions/pundit/authorization_adapter.rb#53
  def attributes_for(action, abstract_model); end

  # This method is called in every controller action and should raise an exception
  # when the authorization fails. The first argument is the name of the controller
  # action as a symbol (:create, :bulk_delete, etc.). The second argument is the
  # AbstractModel instance that applies. The third argument is the actual model
  # instance if it is available.
  #
  # @raise [::Pundit::NotAuthorizedError]
  #
  # source://rails_admin//lib/rails_admin/extensions/pundit/authorization_adapter.rb#25
  def authorize(action, abstract_model = T.unsafe(nil), model_object = T.unsafe(nil)); end

  # This method is called primarily from the view to determine whether the given user
  # has access to perform the action on a given model. It should return true when authorized.
  # This takes the same arguments as +authorize+. The difference is that this will
  # return a boolean whereas +authorize+ will raise an exception when not authorized.
  #
  # @return [Boolean]
  #
  # source://rails_admin//lib/rails_admin/extensions/pundit/authorization_adapter.rb#36
  def authorized?(action, abstract_model = T.unsafe(nil), model_object = T.unsafe(nil)); end

  # This is called when needing to scope a database query. It is called within the list
  # and bulk_delete/destroy actions and should return a scope which limits the records
  # to those which the user can perform the given action on.
  #
  # source://rails_admin//lib/rails_admin/extensions/pundit/authorization_adapter.rb#44
  def query(_action, abstract_model); end

  private

  # source://rails_admin//lib/rails_admin/extensions/pundit/authorization_adapter.rb#66
  def action_for_pundit(action); end

  # source://rails_admin//lib/rails_admin/extensions/pundit/authorization_adapter.rb#60
  def policy(record); end

  class << self
    # This method is called first time only and used for setup
    #
    # source://rails_admin//lib/rails_admin/extensions/pundit/authorization_adapter.rb#11
    def setup; end
  end
end

class RailsAdmin::FormBuilder < ::ActionView::Helpers::FormBuilder
  include ::NestedForm::BuilderMixin
  include ::RailsAdmin::ApplicationHelper

  def dom_id(field); end
  def dom_name(field); end
  def errors_for(field); end
  def field_for(field); end
  def field_wrapper_for(field, nested_in); end
  def fieldset_for(fieldset, nested_in); end
  def generate(options = T.unsafe(nil)); end
  def help_for(field); end
  def hidden_field(method, options = T.unsafe(nil)); end
  def input_for(field); end
  def jquery_namespace(field); end
  def object_infos; end

  protected

  def generator_action(action, nested); end
  def visible_groups(model_config, action); end
  def without_field_error_proc_added_div; end

  private

  def nested_field_association?(field, nested_in); end
end

# source://rails_admin//lib/rails_admin/support/hash_helper.rb#4
class RailsAdmin::HashHelper
  class << self
    # source://rails_admin//lib/rails_admin/support/hash_helper.rb#5
    def symbolize(obj); end
  end
end

class RailsAdmin::MainController < ::RailsAdmin::ApplicationController
  include ::ActionView::Helpers::SanitizeHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::TextHelper
  include ::RailsAdmin::MainHelper
  include ::RailsAdmin::ApplicationHelper
  extend ::ActionView::Helpers::SanitizeHelper::ClassMethods

  def bulk_action; end
  def list_entries(model_config = T.unsafe(nil), auth_scope_key = T.unsafe(nil), additional_scope = T.unsafe(nil), pagination = T.unsafe(nil)); end

  private

  # source://actionview/7.1.3.4/lib/action_view/layouts.rb#330
  def _layout(lookup_context, formats); end

  def _layout_from_proc; end
  def action_missing(name, *_args); end
  def back_or_index; end
  def check_for_cancel; end
  def get_association_scope_from_params; end
  def get_collection(model_config, scope, pagination); end
  def get_sort_hash(model_config); end
  def handle_save_error(whereto = T.unsafe(nil)); end
  def method_missing(name, *args, &block); end
  def redirect_to_on_success; end
  def respond_to_missing?(sym, include_private); end
  def sanitize_params_for!(action, model_config = T.unsafe(nil), target_params = T.unsafe(nil)); end
  def visible_fields(action, model_config = T.unsafe(nil)); end

  class << self
    # source://activesupport/7.1.3.4/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://actionpack/7.1.3.4/lib/action_controller/metal.rb#262
    def middleware_stack; end
  end
end

module RailsAdmin::MainController::HelperMethods
  include ::ActionText::ContentHelper
  include ::ActionText::TagHelper
  include ::Turbo::DriveHelper
  include ::Turbo::FramesHelper
  include ::Turbo::IncludesHelper
  include ::Turbo::StreamsHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::Turbo::Streams::ActionHelper
  include ::DeviseI18n::ViewHelpers
  include ::ActionController::Base::HelperMethods
  include ::RailsAdmin::ApplicationHelper
  include ::RailsAdmin::ApplicationController::HelperMethods
  include ::RailsAdmin::MainHelper
end

module RailsAdmin::MainHelper
  def filterable_fields; end
  def get_indicator(percent); end
  def ordered_filter_options; end
  def ordered_filters; end
  def rails_admin_form_for(*args, &block); end
end

class RailsAdmin::ModelNotFound < ::StandardError; end
class RailsAdmin::ObjectNotFound < ::StandardError; end

# source://rails_admin//lib/rails_admin/support/datetime.rb#4
module RailsAdmin::Support; end

# source://rails_admin//lib/rails_admin/support/datetime.rb#5
class RailsAdmin::Support::Datetime
  class << self
    # source://rails_admin//lib/rails_admin/support/datetime.rb#46
    def to_flatpickr_format(strftime_format); end
  end
end

# Ruby format options as a key and flatpickr format options as a value
#
# source://rails_admin//lib/rails_admin/support/datetime.rb#7
RailsAdmin::Support::Datetime::FLATPICKR_TRANSLATIONS = T.let(T.unsafe(nil), Hash)

# source://rails_admin//lib/rails_admin/support/es_module_processor.rb#5
class RailsAdmin::Support::ESModuleProcessor
  # @return [ESModuleProcessor] a new instance of ESModuleProcessor
  #
  # source://rails_admin//lib/rails_admin/support/es_module_processor.rb#14
  def initialize; end

  # source://rails_admin//lib/rails_admin/support/es_module_processor.rb#16
  def call(input); end

  class << self
    # source://rails_admin//lib/rails_admin/support/es_module_processor.rb#10
    def call(input); end

    # source://rails_admin//lib/rails_admin/support/es_module_processor.rb#6
    def instance; end
  end
end

# source://rails_admin//lib/rails_admin/version.rb#4
class RailsAdmin::Version
  class << self
    # source://rails_admin//lib/rails_admin/version.rb#20
    def actual_js_version; end

    # source://rails_admin//lib/rails_admin/version.rb#16
    def js; end

    # @return [String]
    #
    # source://rails_admin//lib/rails_admin/version.rb#12
    def to_s; end

    # source://rails_admin//lib/rails_admin/version.rb#29
    def warn_with_js_version; end

    private

    # source://rails_admin//lib/rails_admin/version.rb#47
    def js_version_from_node_modules; end
  end
end

# source://rails_admin//lib/rails_admin/version.rb#5
RailsAdmin::Version::MAJOR = T.let(T.unsafe(nil), Integer)

# source://rails_admin//lib/rails_admin/version.rb#6
RailsAdmin::Version::MINOR = T.let(T.unsafe(nil), Integer)

# source://rails_admin//lib/rails_admin/version.rb#7
RailsAdmin::Version::PATCH = T.let(T.unsafe(nil), Integer)

# source://rails_admin//lib/rails_admin/version.rb#8
RailsAdmin::Version::PRE = T.let(T.unsafe(nil), T.untyped)
